<?php
/**
 * JerichoConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * JerichoConfiguration Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JerichoConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JerichoConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'clientGroupId' => 'string',
        'sendDate' => '\DateTime',
        'isPrompt' => 'bool',
        'printToTemplate' => 'bool',
        'emailId' => 'string',
        'exampleVideoId' => 'string',
        'followUpVideoId' => 'string',
        'promptIntro' => 'string',
        'promptSubject' => 'string',
        'promptBody' => 'string',
        'emailSubject' => 'string',
        'emailBody' => 'string',
        'sendWithoutVideo' => 'bool',
        'status' => 'string',
        'mediaType' => 'string',
        'customInitialEmailSubjectLine' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'clientGroupId' => null,
        'sendDate' => 'date-time',
        'isPrompt' => null,
        'printToTemplate' => null,
        'emailId' => null,
        'exampleVideoId' => null,
        'followUpVideoId' => null,
        'promptIntro' => null,
        'promptSubject' => null,
        'promptBody' => null,
        'emailSubject' => null,
        'emailBody' => null,
        'sendWithoutVideo' => null,
        'status' => null,
        'mediaType' => null,
        'customInitialEmailSubjectLine' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'clientGroupId' => 'clientGroupId',
        'sendDate' => 'sendDate',
        'isPrompt' => 'isPrompt',
        'printToTemplate' => 'printToTemplate',
        'emailId' => 'emailId',
        'exampleVideoId' => 'exampleVideoId',
        'followUpVideoId' => 'followUpVideoId',
        'promptIntro' => 'promptIntro',
        'promptSubject' => 'promptSubject',
        'promptBody' => 'promptBody',
        'emailSubject' => 'emailSubject',
        'emailBody' => 'emailBody',
        'sendWithoutVideo' => 'sendWithoutVideo',
        'status' => 'status',
        'mediaType' => 'mediaType',
        'customInitialEmailSubjectLine' => 'customInitialEmailSubjectLine'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'clientGroupId' => 'setClientGroupId',
        'sendDate' => 'setSendDate',
        'isPrompt' => 'setIsPrompt',
        'printToTemplate' => 'setPrintToTemplate',
        'emailId' => 'setEmailId',
        'exampleVideoId' => 'setExampleVideoId',
        'followUpVideoId' => 'setFollowUpVideoId',
        'promptIntro' => 'setPromptIntro',
        'promptSubject' => 'setPromptSubject',
        'promptBody' => 'setPromptBody',
        'emailSubject' => 'setEmailSubject',
        'emailBody' => 'setEmailBody',
        'sendWithoutVideo' => 'setSendWithoutVideo',
        'status' => 'setStatus',
        'mediaType' => 'setMediaType',
        'customInitialEmailSubjectLine' => 'setCustomInitialEmailSubjectLine'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'clientGroupId' => 'getClientGroupId',
        'sendDate' => 'getSendDate',
        'isPrompt' => 'getIsPrompt',
        'printToTemplate' => 'getPrintToTemplate',
        'emailId' => 'getEmailId',
        'exampleVideoId' => 'getExampleVideoId',
        'followUpVideoId' => 'getFollowUpVideoId',
        'promptIntro' => 'getPromptIntro',
        'promptSubject' => 'getPromptSubject',
        'promptBody' => 'getPromptBody',
        'emailSubject' => 'getEmailSubject',
        'emailBody' => 'getEmailBody',
        'sendWithoutVideo' => 'getSendWithoutVideo',
        'status' => 'getStatus',
        'mediaType' => 'getMediaType',
        'customInitialEmailSubjectLine' => 'getCustomInitialEmailSubjectLine'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['clientGroupId'] = isset($data['clientGroupId']) ? $data['clientGroupId'] : null;
        $this->container['sendDate'] = isset($data['sendDate']) ? $data['sendDate'] : null;
        $this->container['isPrompt'] = isset($data['isPrompt']) ? $data['isPrompt'] : null;
        $this->container['printToTemplate'] = isset($data['printToTemplate']) ? $data['printToTemplate'] : null;
        $this->container['emailId'] = isset($data['emailId']) ? $data['emailId'] : null;
        $this->container['exampleVideoId'] = isset($data['exampleVideoId']) ? $data['exampleVideoId'] : null;
        $this->container['followUpVideoId'] = isset($data['followUpVideoId']) ? $data['followUpVideoId'] : null;
        $this->container['promptIntro'] = isset($data['promptIntro']) ? $data['promptIntro'] : null;
        $this->container['promptSubject'] = isset($data['promptSubject']) ? $data['promptSubject'] : null;
        $this->container['promptBody'] = isset($data['promptBody']) ? $data['promptBody'] : null;
        $this->container['emailSubject'] = isset($data['emailSubject']) ? $data['emailSubject'] : null;
        $this->container['emailBody'] = isset($data['emailBody']) ? $data['emailBody'] : null;
        $this->container['sendWithoutVideo'] = isset($data['sendWithoutVideo']) ? $data['sendWithoutVideo'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['mediaType'] = isset($data['mediaType']) ? $data['mediaType'] : null;
        $this->container['customInitialEmailSubjectLine'] = isset($data['customInitialEmailSubjectLine']) ? $data['customInitialEmailSubjectLine'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['isPrompt'] === null) {
            $invalidProperties[] = "'isPrompt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['isPrompt'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets clientGroupId
     *
     * @return string
     */
    public function getClientGroupId()
    {
        return $this->container['clientGroupId'];
    }

    /**
     * Sets clientGroupId
     *
     * @param string $clientGroupId clientGroupId
     *
     * @return $this
     */
    public function setClientGroupId($clientGroupId)
    {
        $this->container['clientGroupId'] = $clientGroupId;

        return $this;
    }

    /**
     * Gets sendDate
     *
     * @return \DateTime
     */
    public function getSendDate()
    {
        return $this->container['sendDate'];
    }

    /**
     * Sets sendDate
     *
     * @param \DateTime $sendDate When the email should be sent.
     *
     * @return $this
     */
    public function setSendDate($sendDate)
    {
        $this->container['sendDate'] = $sendDate;

        return $this;
    }

    /**
     * Gets isPrompt
     *
     * @return bool
     */
    public function getIsPrompt()
    {
        return $this->container['isPrompt'];
    }

    /**
     * Sets isPrompt
     *
     * @param bool $isPrompt Video Prompt: Determines whether this is a static or prompted send.
     *
     * @return $this
     */
    public function setIsPrompt($isPrompt)
    {
        $this->container['isPrompt'] = $isPrompt;

        return $this;
    }

    /**
     * Gets printToTemplate
     *
     * @return bool
     */
    public function getPrintToTemplate()
    {
        return $this->container['printToTemplate'];
    }

    /**
     * Sets printToTemplate
     *
     * @param bool $printToTemplate Controls whether or not the content is printed into a template.
     *
     * @return $this
     */
    public function setPrintToTemplate($printToTemplate)
    {
        $this->container['printToTemplate'] = $printToTemplate;

        return $this;
    }

    /**
     * Gets emailId
     *
     * @return string
     */
    public function getEmailId()
    {
        return $this->container['emailId'];
    }

    /**
     * Sets emailId
     *
     * @param string $emailId Static send: The Email to send on behalf of the group members.
     *
     * @return $this
     */
    public function setEmailId($emailId)
    {
        $this->container['emailId'] = $emailId;

        return $this;
    }

    /**
     * Gets exampleVideoId
     *
     * @return string
     */
    public function getExampleVideoId()
    {
        return $this->container['exampleVideoId'];
    }

    /**
     * Sets exampleVideoId
     *
     * @param string $exampleVideoId Video Prompt: The Video to include as an example for prompted users.
     *
     * @return $this
     */
    public function setExampleVideoId($exampleVideoId)
    {
        $this->container['exampleVideoId'] = $exampleVideoId;

        return $this;
    }

    /**
     * Gets followUpVideoId
     *
     * @return string
     */
    public function getFollowUpVideoId()
    {
        return $this->container['followUpVideoId'];
    }

    /**
     * Sets followUpVideoId
     *
     * @param string $followUpVideoId The Video to include in the tracking follow up.
     *
     * @return $this
     */
    public function setFollowUpVideoId($followUpVideoId)
    {
        $this->container['followUpVideoId'] = $followUpVideoId;

        return $this;
    }

    /**
     * Gets promptIntro
     *
     * @return string
     */
    public function getPromptIntro()
    {
        return $this->container['promptIntro'];
    }

    /**
     * Sets promptIntro
     *
     * @param string $promptIntro Video Prompt: The intro text directed toward prompted users.
     *
     * @return $this
     */
    public function setPromptIntro($promptIntro)
    {
        $this->container['promptIntro'] = $promptIntro;

        return $this;
    }

    /**
     * Gets promptSubject
     *
     * @return string
     */
    public function getPromptSubject()
    {
        return $this->container['promptSubject'];
    }

    /**
     * Sets promptSubject
     *
     * @param string $promptSubject Video Prompt: The subject line prompting the user to record a video.
     *
     * @return $this
     */
    public function setPromptSubject($promptSubject)
    {
        $this->container['promptSubject'] = $promptSubject;

        return $this;
    }

    /**
     * Gets promptBody
     *
     * @return string
     */
    public function getPromptBody()
    {
        return $this->container['promptBody'];
    }

    /**
     * Sets promptBody
     *
     * @param string $promptBody Video Prompt: The HTML body of the email prompting the user to record a video.
     *
     * @return $this
     */
    public function setPromptBody($promptBody)
    {
        $this->container['promptBody'] = $promptBody;

        return $this;
    }

    /**
     * Gets emailSubject
     *
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->container['emailSubject'];
    }

    /**
     * Sets emailSubject
     *
     * @param string $emailSubject Video Prompt: The subject line of the final sent email
     *
     * @return $this
     */
    public function setEmailSubject($emailSubject)
    {
        $this->container['emailSubject'] = $emailSubject;

        return $this;
    }

    /**
     * Gets emailBody
     *
     * @return string
     */
    public function getEmailBody()
    {
        return $this->container['emailBody'];
    }

    /**
     * Sets emailBody
     *
     * @param string $emailBody Video Prompt: The HTML body of the final sent email.
     *
     * @return $this
     */
    public function setEmailBody($emailBody)
    {
        $this->container['emailBody'] = $emailBody;

        return $this;
    }

    /**
     * Gets sendWithoutVideo
     *
     * @return bool
     */
    public function getSendWithoutVideo()
    {
        return $this->container['sendWithoutVideo'];
    }

    /**
     * Sets sendWithoutVideo
     *
     * @param bool $sendWithoutVideo Video Prompt: Whether to send the final email if no video was recorded.
     *
     * @return $this
     */
    public function setSendWithoutVideo($sendWithoutVideo)
    {
        $this->container['sendWithoutVideo'] = $sendWithoutVideo;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The state of the send.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets mediaType
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['mediaType'];
    }

    /**
     * Sets mediaType
     *
     * @param string $mediaType The type of media used for a social send
     *
     * @return $this
     */
    public function setMediaType($mediaType)
    {
        $this->container['mediaType'] = $mediaType;

        return $this;
    }

    /**
     * Gets customInitialEmailSubjectLine
     *
     * @return string
     */
    public function getCustomInitialEmailSubjectLine()
    {
        return $this->container['customInitialEmailSubjectLine'];
    }

    /**
     * Sets customInitialEmailSubjectLine
     *
     * @param string $customInitialEmailSubjectLine The custom subject line for the prompt initial email
     *
     * @return $this
     */
    public function setCustomInitialEmailSubjectLine($customInitialEmailSubjectLine)
    {
        $this->container['customInitialEmailSubjectLine'] = $customInitialEmailSubjectLine;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


