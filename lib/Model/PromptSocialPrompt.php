<?php
/**
 * PromptSocialPrompt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PromptSocialPrompt Class Doc Comment
 *
 * @category Class
 * @description The Prompt\\SocialPrompt class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromptSocialPrompt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Prompt\SocialPrompt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'userId' => 'string',
        'jerichoId' => 'string',
        'promptSubject' => 'string',
        'promptHtml' => 'string',
        'scheduledSendDate' => '\DateTime',
        'clientGroupId' => 'string',
        'thumbnailUrl' => 'string',
        'status' => 'int',
        'createdDate' => '\DateTime',
        'lastNotified' => '\DateTime',
        'sendMechanism' => '\DateTime',
        'sendTypes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'userId' => null,
        'jerichoId' => null,
        'promptSubject' => null,
        'promptHtml' => null,
        'scheduledSendDate' => 'date-time',
        'clientGroupId' => null,
        'thumbnailUrl' => null,
        'status' => null,
        'createdDate' => 'date-time',
        'lastNotified' => 'date-time',
        'sendMechanism' => 'date-time',
        'sendTypes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'userId' => 'userId',
        'jerichoId' => 'jerichoId',
        'promptSubject' => 'promptSubject',
        'promptHtml' => 'promptHtml',
        'scheduledSendDate' => 'scheduledSendDate',
        'clientGroupId' => 'clientGroupId',
        'thumbnailUrl' => 'thumbnailUrl',
        'status' => 'status',
        'createdDate' => 'createdDate',
        'lastNotified' => 'lastNotified',
        'sendMechanism' => 'sendMechanism',
        'sendTypes' => 'sendTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'userId' => 'setUserId',
        'jerichoId' => 'setJerichoId',
        'promptSubject' => 'setPromptSubject',
        'promptHtml' => 'setPromptHtml',
        'scheduledSendDate' => 'setScheduledSendDate',
        'clientGroupId' => 'setClientGroupId',
        'thumbnailUrl' => 'setThumbnailUrl',
        'status' => 'setStatus',
        'createdDate' => 'setCreatedDate',
        'lastNotified' => 'setLastNotified',
        'sendMechanism' => 'setSendMechanism',
        'sendTypes' => 'setSendTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'userId' => 'getUserId',
        'jerichoId' => 'getJerichoId',
        'promptSubject' => 'getPromptSubject',
        'promptHtml' => 'getPromptHtml',
        'scheduledSendDate' => 'getScheduledSendDate',
        'clientGroupId' => 'getClientGroupId',
        'thumbnailUrl' => 'getThumbnailUrl',
        'status' => 'getStatus',
        'createdDate' => 'getCreatedDate',
        'lastNotified' => 'getLastNotified',
        'sendMechanism' => 'getSendMechanism',
        'sendTypes' => 'getSendTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['jerichoId'] = isset($data['jerichoId']) ? $data['jerichoId'] : null;
        $this->container['promptSubject'] = isset($data['promptSubject']) ? $data['promptSubject'] : null;
        $this->container['promptHtml'] = isset($data['promptHtml']) ? $data['promptHtml'] : null;
        $this->container['scheduledSendDate'] = isset($data['scheduledSendDate']) ? $data['scheduledSendDate'] : null;
        $this->container['clientGroupId'] = isset($data['clientGroupId']) ? $data['clientGroupId'] : null;
        $this->container['thumbnailUrl'] = isset($data['thumbnailUrl']) ? $data['thumbnailUrl'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['lastNotified'] = isset($data['lastNotified']) ? $data['lastNotified'] : null;
        $this->container['sendMechanism'] = isset($data['sendMechanism']) ? $data['sendMechanism'] : null;
        $this->container['sendTypes'] = isset($data['sendTypes']) ? $data['sendTypes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The identifier of the prompt. Read Only.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId The prompt's owner. Read Only.
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets jerichoId
     *
     * @return string
     */
    public function getJerichoId()
    {
        return $this->container['jerichoId'];
    }

    /**
     * Sets jerichoId
     *
     * @param string $jerichoId If sent in a jericho context, this will have the jericho id
     *
     * @return $this
     */
    public function setJerichoId($jerichoId)
    {
        $this->container['jerichoId'] = $jerichoId;

        return $this;
    }

    /**
     * Gets promptSubject
     *
     * @return string
     */
    public function getPromptSubject()
    {
        return $this->container['promptSubject'];
    }

    /**
     * Sets promptSubject
     *
     * @param string $promptSubject The prompt's subject line
     *
     * @return $this
     */
    public function setPromptSubject($promptSubject)
    {
        $this->container['promptSubject'] = $promptSubject;

        return $this;
    }

    /**
     * Gets promptHtml
     *
     * @return string
     */
    public function getPromptHtml()
    {
        return $this->container['promptHtml'];
    }

    /**
     * Sets promptHtml
     *
     * @param string $promptHtml The suggested script of the prompt.
     *
     * @return $this
     */
    public function setPromptHtml($promptHtml)
    {
        $this->container['promptHtml'] = $promptHtml;

        return $this;
    }

    /**
     * Gets scheduledSendDate
     *
     * @return \DateTime
     */
    public function getScheduledSendDate()
    {
        return $this->container['scheduledSendDate'];
    }

    /**
     * Sets scheduledSendDate
     *
     * @param \DateTime $scheduledSendDate When the final email is scheduled to be sent
     *
     * @return $this
     */
    public function setScheduledSendDate($scheduledSendDate)
    {
        $this->container['scheduledSendDate'] = $scheduledSendDate;

        return $this;
    }

    /**
     * Gets clientGroupId
     *
     * @return string
     */
    public function getClientGroupId()
    {
        return $this->container['clientGroupId'];
    }

    /**
     * Sets clientGroupId
     *
     * @param string $clientGroupId The client group campaign that created the prompt.
     *
     * @return $this
     */
    public function setClientGroupId($clientGroupId)
    {
        $this->container['clientGroupId'] = $clientGroupId;

        return $this;
    }

    /**
     * Gets thumbnailUrl
     *
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnailUrl'];
    }

    /**
     * Sets thumbnailUrl
     *
     * @param string $thumbnailUrl The URL of a thumbnail image for this prompt
     *
     * @return $this
     */
    public function setThumbnailUrl($thumbnailUrl)
    {
        $this->container['thumbnailUrl'] = $thumbnailUrl;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status The status of the prompt: created = 0, sent = 10, recorded = 20, job_created = 30, timed_out = 40, declined = 50 Read Only
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate When the email was first sent out
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets lastNotified
     *
     * @return \DateTime
     */
    public function getLastNotified()
    {
        return $this->container['lastNotified'];
    }

    /**
     * Sets lastNotified
     *
     * @param \DateTime $lastNotified When the user was last notified about a prompt email waiting for a video
     *
     * @return $this
     */
    public function setLastNotified($lastNotified)
    {
        $this->container['lastNotified'] = $lastNotified;

        return $this;
    }

    /**
     * Gets sendMechanism
     *
     * @return \DateTime
     */
    public function getSendMechanism()
    {
        return $this->container['sendMechanism'];
    }

    /**
     * Sets sendMechanism
     *
     * @param \DateTime $sendMechanism The sendMechanism property
     *
     * @return $this
     */
    public function setSendMechanism($sendMechanism)
    {
        $this->container['sendMechanism'] = $sendMechanism;

        return $this;
    }

    /**
     * Gets sendTypes
     *
     * @return string[]
     */
    public function getSendTypes()
    {
        return $this->container['sendTypes'];
    }

    /**
     * Sets sendTypes
     *
     * @param string[] $sendTypes The types of mechanisms this prompt can send.
     *
     * @return $this
     */
    public function setSendTypes($sendTypes)
    {
        $this->container['sendTypes'] = $sendTypes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


