<?php
/**
 * PromptBot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PromptBot Class Doc Comment
 *
 * @category Class
 * @description The Prompt\\Bot class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromptBot implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Prompt\Bot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'userId' => 'string',
        'emailId' => 'string',
        'listId' => 'string',
        'name' => 'string',
        'contactFieldValueColumn' => 'string',
        'status' => 'int',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'botTypeId' => 'string',
        'templateId' => 'string',
        'videoId' => 'string',
        'content' => 'string',
        'subject' => 'string',
        'generatedBy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'userId' => null,
        'emailId' => null,
        'listId' => null,
        'name' => null,
        'contactFieldValueColumn' => null,
        'status' => null,
        'startDate' => 'date-time',
        'endDate' => 'date-time',
        'botTypeId' => null,
        'templateId' => null,
        'videoId' => null,
        'content' => null,
        'subject' => null,
        'generatedBy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'userId' => 'userId',
        'emailId' => 'emailId',
        'listId' => 'listId',
        'name' => 'name',
        'contactFieldValueColumn' => 'contactFieldValueColumn',
        'status' => 'status',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'botTypeId' => 'botTypeId',
        'templateId' => 'templateId',
        'videoId' => 'videoId',
        'content' => 'content',
        'subject' => 'subject',
        'generatedBy' => 'generatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'userId' => 'setUserId',
        'emailId' => 'setEmailId',
        'listId' => 'setListId',
        'name' => 'setName',
        'contactFieldValueColumn' => 'setContactFieldValueColumn',
        'status' => 'setStatus',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'botTypeId' => 'setBotTypeId',
        'templateId' => 'setTemplateId',
        'videoId' => 'setVideoId',
        'content' => 'setContent',
        'subject' => 'setSubject',
        'generatedBy' => 'setGeneratedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'userId' => 'getUserId',
        'emailId' => 'getEmailId',
        'listId' => 'getListId',
        'name' => 'getName',
        'contactFieldValueColumn' => 'getContactFieldValueColumn',
        'status' => 'getStatus',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'botTypeId' => 'getBotTypeId',
        'templateId' => 'getTemplateId',
        'videoId' => 'getVideoId',
        'content' => 'getContent',
        'subject' => 'getSubject',
        'generatedBy' => 'getGeneratedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['emailId'] = isset($data['emailId']) ? $data['emailId'] : null;
        $this->container['listId'] = isset($data['listId']) ? $data['listId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['contactFieldValueColumn'] = isset($data['contactFieldValueColumn']) ? $data['contactFieldValueColumn'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['botTypeId'] = isset($data['botTypeId']) ? $data['botTypeId'] : null;
        $this->container['templateId'] = isset($data['templateId']) ? $data['templateId'] : null;
        $this->container['videoId'] = isset($data['videoId']) ? $data['videoId'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['generatedBy'] = isset($data['generatedBy']) ? $data['generatedBy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The identifier of the prompt bot. Read Only.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId The prompt bot's owner. Read Only.
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets emailId
     *
     * @return string
     */
    public function getEmailId()
    {
        return $this->container['emailId'];
    }

    /**
     * Sets emailId
     *
     * @param string $emailId The default email being sent to contacts in the prompt bot list.
     *
     * @return $this
     */
    public function setEmailId($emailId)
    {
        $this->container['emailId'] = $emailId;

        return $this;
    }

    /**
     * Gets listId
     *
     * @return string
     */
    public function getListId()
    {
        return $this->container['listId'];
    }

    /**
     * Sets listId
     *
     * @param string $listId The list to attach the Prompt Bot to.
     *
     * @return $this
     */
    public function setListId($listId)
    {
        $this->container['listId'] = $listId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the bot.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contactFieldValueColumn
     *
     * @return string
     */
    public function getContactFieldValueColumn()
    {
        return $this->container['contactFieldValueColumn'];
    }

    /**
     * Sets contactFieldValueColumn
     *
     * @param string $contactFieldValueColumn The custom contact field value column used for this bot.
     *
     * @return $this
     */
    public function setContactFieldValueColumn($contactFieldValueColumn)
    {
        $this->container['contactFieldValueColumn'] = $contactFieldValueColumn;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status The status of the prompt bot. Read Only.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate when the bot started
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate when the bot should finish
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets botTypeId
     *
     * @return string
     */
    public function getBotTypeId()
    {
        return $this->container['botTypeId'];
    }

    /**
     * Sets botTypeId
     *
     * @param string $botTypeId The type of bot.
     *
     * @return $this
     */
    public function setBotTypeId($botTypeId)
    {
        $this->container['botTypeId'] = $botTypeId;

        return $this;
    }

    /**
     * Gets templateId
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['templateId'];
    }

    /**
     * Sets templateId
     *
     * @param string $templateId The template id used to generate the default email.
     *
     * @return $this
     */
    public function setTemplateId($templateId)
    {
        $this->container['templateId'] = $templateId;

        return $this;
    }

    /**
     * Gets videoId
     *
     * @return string
     */
    public function getVideoId()
    {
        return $this->container['videoId'];
    }

    /**
     * Sets videoId
     *
     * @param string $videoId The video that was added to the prompt.
     *
     * @return $this
     */
    public function setVideoId($videoId)
    {
        $this->container['videoId'] = $videoId;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content The content to use in the email.
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The subject of the default email.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets generatedBy
     *
     * @return string
     */
    public function getGeneratedBy()
    {
        return $this->container['generatedBy'];
    }

    /**
     * Sets generatedBy
     *
     * @param string $generatedBy Set when generated as a default by a bot.
     *
     * @return $this
     */
    public function setGeneratedBy($generatedBy)
    {
        $this->container['generatedBy'] = $generatedBy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


