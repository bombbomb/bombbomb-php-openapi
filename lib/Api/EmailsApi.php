<?php
/**
 * EmailsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * EmailsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bombbomb.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EmailsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPrintingPressEmail
     *
     * Create an Email with Printing Press
     *
     * @param string $templateId The template id to be printed. (required)
     * @param string $content The content of the email. (required)
     * @param string $emailId The email id to be printed to. (optional)
     * @param string $videoId A video to replace video place holders with. (optional)
     * @param string $subjectLine The subject line to be printed. (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPrintingPressEmail($templateId, $content, $emailId = null, $videoId = null, $subjectLine = null)
    {
        list($response) = $this->createPrintingPressEmailWithHttpInfo($templateId, $content, $emailId, $videoId, $subjectLine);
        return $response;
    }

    /**
     * Operation createPrintingPressEmailWithHttpInfo
     *
     * Create an Email with Printing Press
     *
     * @param string $templateId The template id to be printed. (required)
     * @param string $content The content of the email. (required)
     * @param string $emailId The email id to be printed to. (optional)
     * @param string $videoId A video to replace video place holders with. (optional)
     * @param string $subjectLine The subject line to be printed. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPrintingPressEmailWithHttpInfo($templateId, $content, $emailId = null, $videoId = null, $subjectLine = null)
    {
        // verify the required parameter 'templateId' is set
        if ($templateId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateId when calling createPrintingPressEmail');
        }
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling createPrintingPressEmail');
        }
        // parse inputs
        $resourcePath = "/emails/print";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($templateId !== null) {
            $formParams['templateId'] = $this->apiClient->getSerializer()->toFormValue($templateId);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = $this->apiClient->getSerializer()->toFormValue($content);
        }
        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = $this->apiClient->getSerializer()->toFormValue($emailId);
        }
        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = $this->apiClient->getSerializer()->toFormValue($videoId);
        }
        // form params
        if ($subjectLine !== null) {
            $formParams['subjectLine'] = $this->apiClient->getSerializer()->toFormValue($subjectLine);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/print'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getAllTemplatesForCurrentUser
     *
     * Get all user templates
     *
     * @param bool $quickSendOnly Whether to return only quick send templates. (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllTemplatesForCurrentUser($quickSendOnly = null)
    {
        list($response) = $this->getAllTemplatesForCurrentUserWithHttpInfo($quickSendOnly);
        return $response;
    }

    /**
     * Operation getAllTemplatesForCurrentUserWithHttpInfo
     *
     * Get all user templates
     *
     * @param bool $quickSendOnly Whether to return only quick send templates. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllTemplatesForCurrentUserWithHttpInfo($quickSendOnly = null)
    {
        // parse inputs
        $resourcePath = "/emails/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($quickSendOnly !== null) {
            $queryParams['quickSendOnly'] = $this->apiClient->getSerializer()->toQueryValue($quickSendOnly);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/templates'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailTracking
     *
     * Get Email Tracking
     *
     * @param string $emailId ID of the email (required)
     * @param string $jobId ID of the Job (or null for all jobs) (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailTracking($emailId, $jobId = null)
    {
        list($response) = $this->getEmailTrackingWithHttpInfo($emailId, $jobId);
        return $response;
    }

    /**
     * Operation getEmailTrackingWithHttpInfo
     *
     * Get Email Tracking
     *
     * @param string $emailId ID of the email (required)
     * @param string $jobId ID of the Job (or null for all jobs) (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailTrackingWithHttpInfo($emailId, $jobId = null)
    {
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailId when calling getEmailTracking');
        }
        // parse inputs
        $resourcePath = "/emails/{emailId}/tracking";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($jobId !== null) {
            $queryParams['jobId'] = $this->apiClient->getSerializer()->toQueryValue($jobId);
        }
        // path params
        if ($emailId !== null) {
            $resourcePath = str_replace(
                "{" . "emailId" . "}",
                $this->apiClient->getSerializer()->toPathValue($emailId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/{emailId}/tracking'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailTrackingInteractions
     *
     * Get Email Tracking Interactions
     *
     * @param string $emailId ID of the email (required)
     * @param string $jobId ID of the Job (or null for all jobs) (optional)
     * @param string $interactionType Interaction type to order and filter by (optional)
     * @param string $searchTerm Search term to filer by (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailTrackingInteractions($emailId, $jobId = null, $interactionType = null, $searchTerm = null)
    {
        list($response) = $this->getEmailTrackingInteractionsWithHttpInfo($emailId, $jobId, $interactionType, $searchTerm);
        return $response;
    }

    /**
     * Operation getEmailTrackingInteractionsWithHttpInfo
     *
     * Get Email Tracking Interactions
     *
     * @param string $emailId ID of the email (required)
     * @param string $jobId ID of the Job (or null for all jobs) (optional)
     * @param string $interactionType Interaction type to order and filter by (optional)
     * @param string $searchTerm Search term to filer by (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailTrackingInteractionsWithHttpInfo($emailId, $jobId = null, $interactionType = null, $searchTerm = null)
    {
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailId when calling getEmailTrackingInteractions');
        }
        // parse inputs
        $resourcePath = "/emails/{emailId}/tracking/interactions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($jobId !== null) {
            $queryParams['jobId'] = $this->apiClient->getSerializer()->toQueryValue($jobId);
        }
        // query params
        if ($interactionType !== null) {
            $queryParams['interactionType'] = $this->apiClient->getSerializer()->toQueryValue($interactionType);
        }
        // query params
        if ($searchTerm !== null) {
            $queryParams['searchTerm'] = $this->apiClient->getSerializer()->toQueryValue($searchTerm);
        }
        // path params
        if ($emailId !== null) {
            $resourcePath = str_replace(
                "{" . "emailId" . "}",
                $this->apiClient->getSerializer()->toPathValue($emailId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/{emailId}/tracking/interactions'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getHourlyEmailTracking
     *
     * Get Hourly Email Tracking
     *
     * @param string $emailId ID of the email (required)
     * @param string $jobId ID of the Job (or null for all jobs) (optional)
     * @param string $interactionType Interaction type to filter by (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getHourlyEmailTracking($emailId, $jobId = null, $interactionType = null)
    {
        list($response) = $this->getHourlyEmailTrackingWithHttpInfo($emailId, $jobId, $interactionType);
        return $response;
    }

    /**
     * Operation getHourlyEmailTrackingWithHttpInfo
     *
     * Get Hourly Email Tracking
     *
     * @param string $emailId ID of the email (required)
     * @param string $jobId ID of the Job (or null for all jobs) (optional)
     * @param string $interactionType Interaction type to filter by (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getHourlyEmailTrackingWithHttpInfo($emailId, $jobId = null, $interactionType = null)
    {
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailId when calling getHourlyEmailTracking');
        }
        // parse inputs
        $resourcePath = "/emails/{emailId}/tracking/hourly";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($jobId !== null) {
            $queryParams['jobId'] = $this->apiClient->getSerializer()->toQueryValue($jobId);
        }
        // query params
        if ($interactionType !== null) {
            $queryParams['interactionType'] = $this->apiClient->getSerializer()->toQueryValue($interactionType);
        }
        // path params
        if ($emailId !== null) {
            $resourcePath = str_replace(
                "{" . "emailId" . "}",
                $this->apiClient->getSerializer()->toPathValue($emailId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/{emailId}/tracking/hourly'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getLiveFireData
     *
     * Get livefire feed data
     *
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLiveFireData()
    {
        list($response) = $this->getLiveFireDataWithHttpInfo();
        return $response;
    }

    /**
     * Operation getLiveFireDataWithHttpInfo
     *
     * Get livefire feed data
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLiveFireDataWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/emails/livefire";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/livefire'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getQuickSendTemplates
     *
     * Get all quicksend templates
     *
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getQuickSendTemplates()
    {
        list($response) = $this->getQuickSendTemplatesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getQuickSendTemplatesWithHttpInfo
     *
     * Get all quicksend templates
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getQuickSendTemplatesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/emails/quicksend/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/quicksend/templates'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTemplateHtmlForTemplateId
     *
     * Get the HTML for a given template
     *
     * @param string $templateId The id of the template. (required)
     * @param string $renderVariables Whether to render profile variables in the returned HTML. (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTemplateHtmlForTemplateId($templateId, $renderVariables = null)
    {
        list($response) = $this->getTemplateHtmlForTemplateIdWithHttpInfo($templateId, $renderVariables);
        return $response;
    }

    /**
     * Operation getTemplateHtmlForTemplateIdWithHttpInfo
     *
     * Get the HTML for a given template
     *
     * @param string $templateId The id of the template. (required)
     * @param string $renderVariables Whether to render profile variables in the returned HTML. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTemplateHtmlForTemplateIdWithHttpInfo($templateId, $renderVariables = null)
    {
        // verify the required parameter 'templateId' is set
        if ($templateId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateId when calling getTemplateHtmlForTemplateId');
        }
        // parse inputs
        $resourcePath = "/emails/templates/{templateId}/html";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($renderVariables !== null) {
            $queryParams['renderVariables'] = $this->apiClient->getSerializer()->toQueryValue($renderVariables);
        }
        // path params
        if ($templateId !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/templates/{templateId}/html'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getVideoQuickSenderData
     *
     * Get quicksend data
     *
     * @param string $message A message for the video content. (optional)
     * @param string $subject A subject for the video content. (optional)
     * @param string $videoId A video ID. (optional)
     * @param string $templateId A template ID. (optional)
     * @param string $commaDelimEmails Comma delimited emails (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getVideoQuickSenderData($message = null, $subject = null, $videoId = null, $templateId = null, $commaDelimEmails = null)
    {
        list($response) = $this->getVideoQuickSenderDataWithHttpInfo($message, $subject, $videoId, $templateId, $commaDelimEmails);
        return $response;
    }

    /**
     * Operation getVideoQuickSenderDataWithHttpInfo
     *
     * Get quicksend data
     *
     * @param string $message A message for the video content. (optional)
     * @param string $subject A subject for the video content. (optional)
     * @param string $videoId A video ID. (optional)
     * @param string $templateId A template ID. (optional)
     * @param string $commaDelimEmails Comma delimited emails (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getVideoQuickSenderDataWithHttpInfo($message = null, $subject = null, $videoId = null, $templateId = null, $commaDelimEmails = null)
    {
        // parse inputs
        $resourcePath = "/emails/quicksend";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($message !== null) {
            $queryParams['message'] = $this->apiClient->getSerializer()->toQueryValue($message);
        }
        // query params
        if ($subject !== null) {
            $queryParams['subject'] = $this->apiClient->getSerializer()->toQueryValue($subject);
        }
        // query params
        if ($videoId !== null) {
            $queryParams['videoId'] = $this->apiClient->getSerializer()->toQueryValue($videoId);
        }
        // query params
        if ($templateId !== null) {
            $queryParams['templateId'] = $this->apiClient->getSerializer()->toQueryValue($templateId);
        }
        // query params
        if ($commaDelimEmails !== null) {
            $queryParams['commaDelimEmails'] = $this->apiClient->getSerializer()->toQueryValue($commaDelimEmails);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/quicksend'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation saveQuickSenderSettings
     *
     * Save quicksender settings
     *
     * @param string $alertOnPlay A preference setting for whether or not to notify user on quicksend email video plays. (optional)
     * @param string $alertOnOpen A preference setting for whether or not to notify user on quicksend email opens. (optional)
     * @param string $templateId Id of a template to use for this send. A null value means use the default for this user. (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveQuickSenderSettings($alertOnPlay = null, $alertOnOpen = null, $templateId = null)
    {
        list($response) = $this->saveQuickSenderSettingsWithHttpInfo($alertOnPlay, $alertOnOpen, $templateId);
        return $response;
    }

    /**
     * Operation saveQuickSenderSettingsWithHttpInfo
     *
     * Save quicksender settings
     *
     * @param string $alertOnPlay A preference setting for whether or not to notify user on quicksend email video plays. (optional)
     * @param string $alertOnOpen A preference setting for whether or not to notify user on quicksend email opens. (optional)
     * @param string $templateId Id of a template to use for this send. A null value means use the default for this user. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveQuickSenderSettingsWithHttpInfo($alertOnPlay = null, $alertOnOpen = null, $templateId = null)
    {
        // parse inputs
        $resourcePath = "/emails/quicksend/settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($alertOnPlay !== null) {
            $formParams['alertOnPlay'] = $this->apiClient->getSerializer()->toFormValue($alertOnPlay);
        }
        // form params
        if ($alertOnOpen !== null) {
            $formParams['alertOnOpen'] = $this->apiClient->getSerializer()->toFormValue($alertOnOpen);
        }
        // form params
        if ($templateId !== null) {
            $formParams['templateId'] = $this->apiClient->getSerializer()->toFormValue($templateId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/quicksend/settings'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation videoQuickSender
     *
     * Send a quicksend email
     *
     * @param string $videoId A guid id for the video. (optional)
     * @param string $emailAddresses A semi-colon separated list of email addresses to send to. (optional)
     * @param string $subject Subject line for the email. (optional)
     * @param string $message Message for the body of the email. (optional)
     * @param string $listIds An array of list ids (optional)
     * @param int $scheduledSendTimestamp When to schedule the send (seconds since epoch). null value means send immediately. (optional)
     * @param string $extendedProperties Bool value that when checked will send back both emailId as well as extra properties (optional)
     * @param string $templateId Id of a template to use for this send. A null value means use the default for this user. (optional)
     * @param string $stripHTML remove HTML elements (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function videoQuickSender($videoId = null, $emailAddresses = null, $subject = null, $message = null, $listIds = null, $scheduledSendTimestamp = null, $extendedProperties = null, $templateId = null, $stripHTML = null)
    {
        list($response) = $this->videoQuickSenderWithHttpInfo($videoId, $emailAddresses, $subject, $message, $listIds, $scheduledSendTimestamp, $extendedProperties, $templateId, $stripHTML);
        return $response;
    }

    /**
     * Operation videoQuickSenderWithHttpInfo
     *
     * Send a quicksend email
     *
     * @param string $videoId A guid id for the video. (optional)
     * @param string $emailAddresses A semi-colon separated list of email addresses to send to. (optional)
     * @param string $subject Subject line for the email. (optional)
     * @param string $message Message for the body of the email. (optional)
     * @param string $listIds An array of list ids (optional)
     * @param int $scheduledSendTimestamp When to schedule the send (seconds since epoch). null value means send immediately. (optional)
     * @param string $extendedProperties Bool value that when checked will send back both emailId as well as extra properties (optional)
     * @param string $templateId Id of a template to use for this send. A null value means use the default for this user. (optional)
     * @param string $stripHTML remove HTML elements (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function videoQuickSenderWithHttpInfo($videoId = null, $emailAddresses = null, $subject = null, $message = null, $listIds = null, $scheduledSendTimestamp = null, $extendedProperties = null, $templateId = null, $stripHTML = null)
    {
        // parse inputs
        $resourcePath = "/emails/quicksend";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = $this->apiClient->getSerializer()->toFormValue($videoId);
        }
        // form params
        if ($emailAddresses !== null) {
            $formParams['emailAddresses'] = $this->apiClient->getSerializer()->toFormValue($emailAddresses);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = $this->apiClient->getSerializer()->toFormValue($subject);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = $this->apiClient->getSerializer()->toFormValue($message);
        }
        // form params
        if ($listIds !== null) {
            $formParams['listIds'] = $this->apiClient->getSerializer()->toFormValue($listIds);
        }
        // form params
        if ($scheduledSendTimestamp !== null) {
            $formParams['scheduledSendTimestamp'] = $this->apiClient->getSerializer()->toFormValue($scheduledSendTimestamp);
        }
        // form params
        if ($extendedProperties !== null) {
            $formParams['extendedProperties'] = $this->apiClient->getSerializer()->toFormValue($extendedProperties);
        }
        // form params
        if ($templateId !== null) {
            $formParams['templateId'] = $this->apiClient->getSerializer()->toFormValue($templateId);
        }
        // form params
        if ($stripHTML !== null) {
            $formParams['stripHTML'] = $this->apiClient->getSerializer()->toFormValue($stripHTML);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/emails/quicksend'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
