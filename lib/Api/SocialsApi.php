<?php
/**
 * SocialsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.24005
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SocialsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SocialsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bombbomb.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SocialsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getSocialArticleProperties
     *
     * Gets the social email properties
     *
     * @param string $jerichoId associated jericho Id (required)
     * @param string $emailId This is the email Id for the email url (required)
     * @param string $originatorId This is the originator Id (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialArticleProperties($jerichoId, $emailId, $originatorId)
    {
        list($response) = $this->getSocialArticlePropertiesWithHttpInfo($jerichoId, $emailId, $originatorId);
        return $response;
    }

    /**
     * Operation getSocialArticlePropertiesWithHttpInfo
     *
     * Gets the social email properties
     *
     * @param string $jerichoId associated jericho Id (required)
     * @param string $emailId This is the email Id for the email url (required)
     * @param string $originatorId This is the originator Id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialArticlePropertiesWithHttpInfo($jerichoId, $emailId, $originatorId)
    {
        // verify the required parameter 'jerichoId' is set
        if ($jerichoId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $jerichoId when calling getSocialArticleProperties');
        }
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailId when calling getSocialArticleProperties');
        }
        // verify the required parameter 'originatorId' is set
        if ($originatorId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $originatorId when calling getSocialArticleProperties');
        }
        // parse inputs
        $resourcePath = "/socials/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($jerichoId !== null) {
            $queryParams['jerichoId'] = $this->apiClient->getSerializer()->toQueryValue($jerichoId);
        }
        // query params
        if ($emailId !== null) {
            $queryParams['emailId'] = $this->apiClient->getSerializer()->toQueryValue($emailId);
        }
        // query params
        if ($originatorId !== null) {
            $queryParams['originatorId'] = $this->apiClient->getSerializer()->toQueryValue($originatorId);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/properties'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getSocialAutoShares
     *
     * Gets the auto shares from the client group assoc id
     *
     * @param string $clientGroupId ID of the client group association (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialAutoShares($clientGroupId)
    {
        list($response) = $this->getSocialAutoSharesWithHttpInfo($clientGroupId);
        return $response;
    }

    /**
     * Operation getSocialAutoSharesWithHttpInfo
     *
     * Gets the auto shares from the client group assoc id
     *
     * @param string $clientGroupId ID of the client group association (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialAutoSharesWithHttpInfo($clientGroupId)
    {
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientGroupId when calling getSocialAutoShares');
        }
        // parse inputs
        $resourcePath = "/socials/shares";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($clientGroupId !== null) {
            $queryParams['clientGroupId'] = $this->apiClient->getSerializer()->toQueryValue($clientGroupId);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/shares'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getSocialPermissions
     *
     * Get permissions for social integration
     *
     * @param string $socialType Type of social integration (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialPermissions($socialType)
    {
        list($response) = $this->getSocialPermissionsWithHttpInfo($socialType);
        return $response;
    }

    /**
     * Operation getSocialPermissionsWithHttpInfo
     *
     * Get permissions for social integration
     *
     * @param string $socialType Type of social integration (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialPermissionsWithHttpInfo($socialType)
    {
        // verify the required parameter 'socialType' is set
        if ($socialType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $socialType when calling getSocialPermissions');
        }
        // parse inputs
        $resourcePath = "/socials/permissions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($socialType !== null) {
            $queryParams['socialType'] = $this->apiClient->getSerializer()->toQueryValue($socialType);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/permissions'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getSocialStatus
     *
     * Gets the social state
     *
     * @param string $originatorId associated originatorId (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialStatus($originatorId)
    {
        list($response) = $this->getSocialStatusWithHttpInfo($originatorId);
        return $response;
    }

    /**
     * Operation getSocialStatusWithHttpInfo
     *
     * Gets the social state
     *
     * @param string $originatorId associated originatorId (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialStatusWithHttpInfo($originatorId)
    {
        // verify the required parameter 'originatorId' is set
        if ($originatorId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $originatorId when calling getSocialStatus');
        }
        // parse inputs
        $resourcePath = "/socials/states";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($originatorId !== null) {
            $queryParams['originatorId'] = $this->apiClient->getSerializer()->toQueryValue($originatorId);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/states'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateSocialAutoShares
     *
     * Gets the auto shares from the client group assoc id
     *
     * @param string $autoShare The social share that will auto share to (required)
     * @param string $clientGroupId ID of the client group association (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateSocialAutoShares($autoShare, $clientGroupId)
    {
        list($response) = $this->updateSocialAutoSharesWithHttpInfo($autoShare, $clientGroupId);
        return $response;
    }

    /**
     * Operation updateSocialAutoSharesWithHttpInfo
     *
     * Gets the auto shares from the client group assoc id
     *
     * @param string $autoShare The social share that will auto share to (required)
     * @param string $clientGroupId ID of the client group association (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateSocialAutoSharesWithHttpInfo($autoShare, $clientGroupId)
    {
        // verify the required parameter 'autoShare' is set
        if ($autoShare === null) {
            throw new \InvalidArgumentException('Missing the required parameter $autoShare when calling updateSocialAutoShares');
        }
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientGroupId when calling updateSocialAutoShares');
        }
        // parse inputs
        $resourcePath = "/socials/shares";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($autoShare !== null) {
            $formParams['autoShare'] = $this->apiClient->getSerializer()->toFormValue($autoShare);
        }
        // form params
        if ($clientGroupId !== null) {
            $formParams['clientGroupId'] = $this->apiClient->getSerializer()->toFormValue($clientGroupId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/shares'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateSocialMessage
     *
     * Sets the users social message to what they typed in
     *
     * @param string $message The social message the user typed in (required)
     * @param string $originatorId The parent id tied to the social share (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateSocialMessage($message, $originatorId)
    {
        list($response) = $this->updateSocialMessageWithHttpInfo($message, $originatorId);
        return $response;
    }

    /**
     * Operation updateSocialMessageWithHttpInfo
     *
     * Sets the users social message to what they typed in
     *
     * @param string $message The social message the user typed in (required)
     * @param string $originatorId The parent id tied to the social share (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateSocialMessageWithHttpInfo($message, $originatorId)
    {
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling updateSocialMessage');
        }
        // verify the required parameter 'originatorId' is set
        if ($originatorId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $originatorId when calling updateSocialMessage');
        }
        // parse inputs
        $resourcePath = "/socials/message";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($message !== null) {
            $formParams['message'] = $this->apiClient->getSerializer()->toFormValue($message);
        }
        // form params
        if ($originatorId !== null) {
            $formParams['originatorId'] = $this->apiClient->getSerializer()->toFormValue($originatorId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/message'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateSocialStatus
     *
     * Updates the social state for the object
     *
     * @param string $state The state to set to (required)
     * @param string $originatorId The parent id tied to the social share (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateSocialStatus($state, $originatorId)
    {
        list($response) = $this->updateSocialStatusWithHttpInfo($state, $originatorId);
        return $response;
    }

    /**
     * Operation updateSocialStatusWithHttpInfo
     *
     * Updates the social state for the object
     *
     * @param string $state The state to set to (required)
     * @param string $originatorId The parent id tied to the social share (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateSocialStatusWithHttpInfo($state, $originatorId)
    {
        // verify the required parameter 'state' is set
        if ($state === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state when calling updateSocialStatus');
        }
        // verify the required parameter 'originatorId' is set
        if ($originatorId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $originatorId when calling updateSocialStatus');
        }
        // parse inputs
        $resourcePath = "/socials/state";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }
        // form params
        if ($originatorId !== null) {
            $formParams['originatorId'] = $this->apiClient->getSerializer()->toFormValue($originatorId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/state'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
