<?php
/**
 * SocialsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SocialsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SocialsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bombbomb.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SocialsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getFacebookPages
     *
     * Gets facebook pages
     *
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFacebookPages()
    {
        list($response) = $this->getFacebookPagesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getFacebookPagesWithHttpInfo
     *
     * Gets facebook pages
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFacebookPagesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/socials/facebook/pages";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/facebook/pages'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getSocialArticleProperties
     *
     * Gets the social email properties
     *
     * @param string $emailId This is the email Id for the email url (required)
     * @param string $socialContentId This is the social content Id (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialArticleProperties($emailId, $socialContentId)
    {
        list($response) = $this->getSocialArticlePropertiesWithHttpInfo($emailId, $socialContentId);
        return $response;
    }

    /**
     * Operation getSocialArticlePropertiesWithHttpInfo
     *
     * Gets the social email properties
     *
     * @param string $emailId This is the email Id for the email url (required)
     * @param string $socialContentId This is the social content Id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialArticlePropertiesWithHttpInfo($emailId, $socialContentId)
    {
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailId when calling getSocialArticleProperties');
        }
        // verify the required parameter 'socialContentId' is set
        if ($socialContentId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $socialContentId when calling getSocialArticleProperties');
        }
        // parse inputs
        $resourcePath = "/socials/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($emailId !== null) {
            $queryParams['emailId'] = $this->apiClient->getSerializer()->toQueryValue($emailId);
        }
        // query params
        if ($socialContentId !== null) {
            $queryParams['socialContentId'] = $this->apiClient->getSerializer()->toQueryValue($socialContentId);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/properties'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getSocialAuthorizations
     *
     * Get authorizations for all social integration
     *
     * @param string $clientGroupId ID of the client group association (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialAuthorizations($clientGroupId = null)
    {
        list($response) = $this->getSocialAuthorizationsWithHttpInfo($clientGroupId);
        return $response;
    }

    /**
     * Operation getSocialAuthorizationsWithHttpInfo
     *
     * Get authorizations for all social integration
     *
     * @param string $clientGroupId ID of the client group association (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialAuthorizationsWithHttpInfo($clientGroupId = null)
    {
        // parse inputs
        $resourcePath = "/socials/authorizations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($clientGroupId !== null) {
            $queryParams['clientGroupId'] = $this->apiClient->getSerializer()->toQueryValue($clientGroupId);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/authorizations'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getSocialProfileProperties
     *
     * Gets the profile properties
     *
     * @param string $socialType The social type (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialProfileProperties($socialType)
    {
        list($response) = $this->getSocialProfilePropertiesWithHttpInfo($socialType);
        return $response;
    }

    /**
     * Operation getSocialProfilePropertiesWithHttpInfo
     *
     * Gets the profile properties
     *
     * @param string $socialType The social type (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialProfilePropertiesWithHttpInfo($socialType)
    {
        // verify the required parameter 'socialType' is set
        if ($socialType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $socialType when calling getSocialProfileProperties');
        }
        // parse inputs
        $resourcePath = "/socials/profile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($socialType !== null) {
            $queryParams['socialType'] = $this->apiClient->getSerializer()->toQueryValue($socialType);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/profile'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getSocialStats
     *
     * Get social stats for a prompt
     *
     * @param string $promptId ID of the prompt (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialStats($promptId)
    {
        list($response) = $this->getSocialStatsWithHttpInfo($promptId);
        return $response;
    }

    /**
     * Operation getSocialStatsWithHttpInfo
     *
     * Get social stats for a prompt
     *
     * @param string $promptId ID of the prompt (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSocialStatsWithHttpInfo($promptId)
    {
        // verify the required parameter 'promptId' is set
        if ($promptId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promptId when calling getSocialStats');
        }
        // parse inputs
        $resourcePath = "/socials/{promptId}/stats";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($promptId !== null) {
            $resourcePath = str_replace(
                "{" . "promptId" . "}",
                $this->apiClient->getSerializer()->toPathValue($promptId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/{promptId}/stats'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation postSocialContent
     *
     * Creates social content
     *
     * @param string $emailId The email&#39;s id (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postSocialContent($emailId)
    {
        list($response) = $this->postSocialContentWithHttpInfo($emailId);
        return $response;
    }

    /**
     * Operation postSocialContentWithHttpInfo
     *
     * Creates social content
     *
     * @param string $emailId The email&#39;s id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postSocialContentWithHttpInfo($emailId)
    {
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailId when calling postSocialContent');
        }
        // parse inputs
        $resourcePath = "/socials/content";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = $this->apiClient->getSerializer()->toFormValue($emailId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/content'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation retrySocialSend
     *
     * Sends social content
     *
     * @param string $promptId The prompt id (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function retrySocialSend($promptId)
    {
        list($response) = $this->retrySocialSendWithHttpInfo($promptId);
        return $response;
    }

    /**
     * Operation retrySocialSendWithHttpInfo
     *
     * Sends social content
     *
     * @param string $promptId The prompt id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function retrySocialSendWithHttpInfo($promptId)
    {
        // verify the required parameter 'promptId' is set
        if ($promptId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promptId when calling retrySocialSend');
        }
        // parse inputs
        $resourcePath = "/socials/send/retry";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($promptId !== null) {
            $formParams['promptId'] = $this->apiClient->getSerializer()->toFormValue($promptId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/send/retry'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sendSocial
     *
     * Sends social content
     *
     * @param string $promptId The prompt id (required)
     * @param string $socialType The destination for social content (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function sendSocial($promptId, $socialType)
    {
        list($response) = $this->sendSocialWithHttpInfo($promptId, $socialType);
        return $response;
    }

    /**
     * Operation sendSocialWithHttpInfo
     *
     * Sends social content
     *
     * @param string $promptId The prompt id (required)
     * @param string $socialType The destination for social content (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function sendSocialWithHttpInfo($promptId, $socialType)
    {
        // verify the required parameter 'promptId' is set
        if ($promptId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promptId when calling sendSocial');
        }
        // verify the required parameter 'socialType' is set
        if ($socialType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $socialType when calling sendSocial');
        }
        // parse inputs
        $resourcePath = "/socials/send";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($promptId !== null) {
            $formParams['promptId'] = $this->apiClient->getSerializer()->toFormValue($promptId);
        }
        // form params
        if ($socialType !== null) {
            $formParams['socialType'] = $this->apiClient->getSerializer()->toFormValue($socialType);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/send'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateClientGroupSendMechanism
     *
     * Gets the auto shares from the client group assoc id
     *
     * @param string $sendMechanism The send mechanism for the prompt (required)
     * @param string $clientGroupId ID of the client group association (required)
     * @param string $enabled Is the send mechanism enabled? (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateClientGroupSendMechanism($sendMechanism, $clientGroupId, $enabled = null)
    {
        list($response) = $this->updateClientGroupSendMechanismWithHttpInfo($sendMechanism, $clientGroupId, $enabled);
        return $response;
    }

    /**
     * Operation updateClientGroupSendMechanismWithHttpInfo
     *
     * Gets the auto shares from the client group assoc id
     *
     * @param string $sendMechanism The send mechanism for the prompt (required)
     * @param string $clientGroupId ID of the client group association (required)
     * @param string $enabled Is the send mechanism enabled? (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateClientGroupSendMechanismWithHttpInfo($sendMechanism, $clientGroupId, $enabled = null)
    {
        // verify the required parameter 'sendMechanism' is set
        if ($sendMechanism === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sendMechanism when calling updateClientGroupSendMechanism');
        }
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientGroupId when calling updateClientGroupSendMechanism');
        }
        // parse inputs
        $resourcePath = "/socials/client/sendMechanism";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($sendMechanism !== null) {
            $formParams['sendMechanism'] = $this->apiClient->getSerializer()->toFormValue($sendMechanism);
        }
        // form params
        if ($clientGroupId !== null) {
            $formParams['clientGroupId'] = $this->apiClient->getSerializer()->toFormValue($clientGroupId);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = $this->apiClient->getSerializer()->toFormValue($enabled);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/client/sendMechanism'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateClientGroupsSendMechanism
     *
     * Toggles the prompt campaigns in a users account
     *
     * @param string $sendMechanism The send mechanism for the prompt (required)
     * @param string $enabled Is the send mechanism enabled? (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateClientGroupsSendMechanism($sendMechanism, $enabled)
    {
        list($response) = $this->updateClientGroupsSendMechanismWithHttpInfo($sendMechanism, $enabled);
        return $response;
    }

    /**
     * Operation updateClientGroupsSendMechanismWithHttpInfo
     *
     * Toggles the prompt campaigns in a users account
     *
     * @param string $sendMechanism The send mechanism for the prompt (required)
     * @param string $enabled Is the send mechanism enabled? (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateClientGroupsSendMechanismWithHttpInfo($sendMechanism, $enabled)
    {
        // verify the required parameter 'sendMechanism' is set
        if ($sendMechanism === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sendMechanism when calling updateClientGroupsSendMechanism');
        }
        // verify the required parameter 'enabled' is set
        if ($enabled === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enabled when calling updateClientGroupsSendMechanism');
        }
        // parse inputs
        $resourcePath = "/socials/client/sendMechanisms";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($sendMechanism !== null) {
            $formParams['sendMechanism'] = $this->apiClient->getSerializer()->toFormValue($sendMechanism);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = $this->apiClient->getSerializer()->toFormValue($enabled);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/client/sendMechanisms'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateFacebookPages
     *
     * Updates facebook page Ids
     *
     * @param string $pageIds Page Ids for the prompt (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateFacebookPages($pageIds)
    {
        list($response) = $this->updateFacebookPagesWithHttpInfo($pageIds);
        return $response;
    }

    /**
     * Operation updateFacebookPagesWithHttpInfo
     *
     * Updates facebook page Ids
     *
     * @param string $pageIds Page Ids for the prompt (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateFacebookPagesWithHttpInfo($pageIds)
    {
        // verify the required parameter 'pageIds' is set
        if ($pageIds === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pageIds when calling updateFacebookPages');
        }
        // parse inputs
        $resourcePath = "/socials/facebook/pages";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($pageIds !== null) {
            $formParams['pageIds'] = $this->apiClient->getSerializer()->toFormValue($pageIds);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/facebook/pages'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateSocialContent
     *
     * Updates social content
     *
     * @param string $socialId The social id (required)
     * @param string $title The title for the article (optional)
     * @param string $description The article description (optional)
     * @param string $pictureUrl The article picture url (optional)
     * @param string $suggestedMessage The suggested message to use (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateSocialContent($socialId, $title = null, $description = null, $pictureUrl = null, $suggestedMessage = null)
    {
        list($response) = $this->updateSocialContentWithHttpInfo($socialId, $title, $description, $pictureUrl, $suggestedMessage);
        return $response;
    }

    /**
     * Operation updateSocialContentWithHttpInfo
     *
     * Updates social content
     *
     * @param string $socialId The social id (required)
     * @param string $title The title for the article (optional)
     * @param string $description The article description (optional)
     * @param string $pictureUrl The article picture url (optional)
     * @param string $suggestedMessage The suggested message to use (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateSocialContentWithHttpInfo($socialId, $title = null, $description = null, $pictureUrl = null, $suggestedMessage = null)
    {
        // verify the required parameter 'socialId' is set
        if ($socialId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $socialId when calling updateSocialContent');
        }
        // parse inputs
        $resourcePath = "/socials/content";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($socialId !== null) {
            $formParams['socialId'] = $this->apiClient->getSerializer()->toFormValue($socialId);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = $this->apiClient->getSerializer()->toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = $this->apiClient->getSerializer()->toFormValue($description);
        }
        // form params
        if ($pictureUrl !== null) {
            $formParams['pictureUrl'] = $this->apiClient->getSerializer()->toFormValue($pictureUrl);
        }
        // form params
        if ($suggestedMessage !== null) {
            $formParams['suggestedMessage'] = $this->apiClient->getSerializer()->toFormValue($suggestedMessage);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/socials/content'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
