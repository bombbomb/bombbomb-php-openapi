<?php
/**
 * ContactsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bombbomb.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ContactsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addContactsCSV
     *
     * Add contacts from a CSV file.
     *
     * @param string $mappingData The info sent for the contacts (required)
     * @param string $listData The info sent with the import for the list (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addContactsCSV($mappingData, $listData)
    {
        list($response) = $this->addContactsCSVWithHttpInfo($mappingData, $listData);
        return $response;
    }

    /**
     * Operation addContactsCSVWithHttpInfo
     *
     * Add contacts from a CSV file.
     *
     * @param string $mappingData The info sent for the contacts (required)
     * @param string $listData The info sent with the import for the list (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addContactsCSVWithHttpInfo($mappingData, $listData)
    {
        // verify the required parameter 'mappingData' is set
        if ($mappingData === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mappingData when calling addContactsCSV');
        }
        // verify the required parameter 'listData' is set
        if ($listData === null) {
            throw new \InvalidArgumentException('Missing the required parameter $listData when calling addContactsCSV');
        }
        // parse inputs
        $resourcePath = "/contacts/import_csv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($mappingData !== null) {
            $formParams['mappingData'] = $this->apiClient->getSerializer()->toFormValue($mappingData);
        }
        // form params
        if ($listData !== null) {
            $formParams['listData'] = $this->apiClient->getSerializer()->toFormValue($listData);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/import_csv'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation addNewContact
     *
     * Add a contact.
     *
     * @param string $contactEmail Email of the new contact we are adding (required)
     * @param string $contactInfo The info sent for this contact (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addNewContact($contactEmail, $contactInfo = null)
    {
        list($response) = $this->addNewContactWithHttpInfo($contactEmail, $contactInfo);
        return $response;
    }

    /**
     * Operation addNewContactWithHttpInfo
     *
     * Add a contact.
     *
     * @param string $contactEmail Email of the new contact we are adding (required)
     * @param string $contactInfo The info sent for this contact (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addNewContactWithHttpInfo($contactEmail, $contactInfo = null)
    {
        // verify the required parameter 'contactEmail' is set
        if ($contactEmail === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contactEmail when calling addNewContact');
        }
        // parse inputs
        $resourcePath = "/contacts/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($contactEmail !== null) {
            $formParams['contactEmail'] = $this->apiClient->getSerializer()->toFormValue($contactEmail);
        }
        // form params
        if ($contactInfo !== null) {
            $formParams['contactInfo'] = $this->apiClient->getSerializer()->toFormValue($contactInfo);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation addNewCustomField
     *
     * Add custom fields.
     *
     * @param string $fieldName Custom field name to be added (required)
     * @param string $fieldType Custom field type for the field to be added (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addNewCustomField($fieldName, $fieldType = null)
    {
        list($response) = $this->addNewCustomFieldWithHttpInfo($fieldName, $fieldType);
        return $response;
    }

    /**
     * Operation addNewCustomFieldWithHttpInfo
     *
     * Add custom fields.
     *
     * @param string $fieldName Custom field name to be added (required)
     * @param string $fieldType Custom field type for the field to be added (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addNewCustomFieldWithHttpInfo($fieldName, $fieldType = null)
    {
        // verify the required parameter 'fieldName' is set
        if ($fieldName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fieldName when calling addNewCustomField');
        }
        // parse inputs
        $resourcePath = "/contacts/custom_fields/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($fieldName !== null) {
            $formParams['fieldName'] = $this->apiClient->getSerializer()->toFormValue($fieldName);
        }
        // form params
        if ($fieldType !== null) {
            $formParams['fieldType'] = $this->apiClient->getSerializer()->toFormValue($fieldType);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/custom_fields/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation addPastedContacts
     *
     * Add pasted contacts.
     *
     * @param string $contactEmails Emails array of the new contacts we are adding (required)
     * @param string $listInfo Information about the lists id, recalculations on totals, consent etc (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addPastedContacts($contactEmails, $listInfo = null)
    {
        list($response) = $this->addPastedContactsWithHttpInfo($contactEmails, $listInfo);
        return $response;
    }

    /**
     * Operation addPastedContactsWithHttpInfo
     *
     * Add pasted contacts.
     *
     * @param string $contactEmails Emails array of the new contacts we are adding (required)
     * @param string $listInfo Information about the lists id, recalculations on totals, consent etc (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addPastedContactsWithHttpInfo($contactEmails, $listInfo = null)
    {
        // verify the required parameter 'contactEmails' is set
        if ($contactEmails === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contactEmails when calling addPastedContacts');
        }
        // parse inputs
        $resourcePath = "/contacts/paste";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($contactEmails !== null) {
            $formParams['contactEmails'] = $this->apiClient->getSerializer()->toFormValue($contactEmails);
        }
        // form params
        if ($listInfo !== null) {
            $formParams['listInfo'] = $this->apiClient->getSerializer()->toFormValue($listInfo);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/paste'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cSVToObject
     *
     * Format CSV.
     *
     * @param string $file The CSV file being uploaded (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cSVToObject($file)
    {
        list($response) = $this->cSVToObjectWithHttpInfo($file);
        return $response;
    }

    /**
     * Operation cSVToObjectWithHttpInfo
     *
     * Format CSV.
     *
     * @param string $file The CSV file being uploaded (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cSVToObjectWithHttpInfo($file)
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling cSVToObject');
        }
        // parse inputs
        $resourcePath = "/csv-to-object";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($file !== null) {
            $formParams['file'] = $this->apiClient->getSerializer()->toFormValue($file);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/csv-to-object'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteContacts
     *
     * Delete Contacts
     *
     * @param string $listId The list of contacts to be deleted. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteContacts($listId)
    {
        list($response) = $this->deleteContactsWithHttpInfo($listId);
        return $response;
    }

    /**
     * Operation deleteContactsWithHttpInfo
     *
     * Delete Contacts
     *
     * @param string $listId The list of contacts to be deleted. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteContactsWithHttpInfo($listId)
    {
        // verify the required parameter 'listId' is set
        if ($listId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $listId when calling deleteContacts');
        }
        // parse inputs
        $resourcePath = "/contacts/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($listId !== null) {
            $formParams['listId'] = $this->apiClient->getSerializer()->toFormValue($listId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/delete'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getContactById
     *
     * Get Contact Details
     *
     * @param string $id Guid for the contact. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getContactById($id)
    {
        list($response) = $this->getContactByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getContactByIdWithHttpInfo
     *
     * Get Contact Details
     *
     * @param string $id Guid for the contact. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getContactByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getContactById');
        }
        // parse inputs
        $resourcePath = "/contact/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contact/{id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomFields
     *
     * Get custom fields.
     *
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomFields()
    {
        list($response) = $this->getCustomFieldsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCustomFieldsWithHttpInfo
     *
     * Get custom fields.
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomFieldsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/contacts/custom_fields/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/custom_fields/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
