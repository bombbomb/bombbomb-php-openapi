<?php
/**
 * AccountsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.24005
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bombbomb.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AccountsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation accountDetails
     *
     * Get account details.
     *
     * @param string $email Your login email address (optional)
     * @param string $pw Your password (optional)
     * @param string $apiKey Your Api Key (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function accountDetails($email = null, $pw = null, $apiKey = null)
    {
        list($response) = $this->accountDetailsWithHttpInfo($email, $pw, $apiKey);
        return $response;
    }

    /**
     * Operation accountDetailsWithHttpInfo
     *
     * Get account details.
     *
     * @param string $email Your login email address (optional)
     * @param string $pw Your password (optional)
     * @param string $apiKey Your Api Key (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function accountDetailsWithHttpInfo($email = null, $pw = null, $apiKey = null)
    {
        // parse inputs
        $resourcePath = "/accounts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($pw !== null) {
            $queryParams['pw'] = $this->apiClient->getSerializer()->toQueryValue($pw);
        }
        // query params
        if ($apiKey !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($apiKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/accounts'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation createAccount
     *
     * Create Account
     *
     * @param string $teamId The team id (required)
     * @param string $firstName First name of the user. (required)
     * @param string $lastName Last name of the user. (required)
     * @param string $emailAddress Email address of the user. (required)
     * @param string $companyName Company of the user. (required)
     * @param string $phone Phone number of the user. (required)
     * @param string $country Country of the user. (optional)
     * @param string $industry Industry of the user. (optional)
     * @param string $address Street Address of the user. (optional)
     * @param string $city City of the user. (optional)
     * @param string $postalCode Postal/Zip code of the user. (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createAccount($teamId, $firstName, $lastName, $emailAddress, $companyName, $phone, $country = null, $industry = null, $address = null, $city = null, $postalCode = null)
    {
        list($response) = $this->createAccountWithHttpInfo($teamId, $firstName, $lastName, $emailAddress, $companyName, $phone, $country, $industry, $address, $city, $postalCode);
        return $response;
    }

    /**
     * Operation createAccountWithHttpInfo
     *
     * Create Account
     *
     * @param string $teamId The team id (required)
     * @param string $firstName First name of the user. (required)
     * @param string $lastName Last name of the user. (required)
     * @param string $emailAddress Email address of the user. (required)
     * @param string $companyName Company of the user. (required)
     * @param string $phone Phone number of the user. (required)
     * @param string $country Country of the user. (optional)
     * @param string $industry Industry of the user. (optional)
     * @param string $address Street Address of the user. (optional)
     * @param string $city City of the user. (optional)
     * @param string $postalCode Postal/Zip code of the user. (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createAccountWithHttpInfo($teamId, $firstName, $lastName, $emailAddress, $companyName, $phone, $country = null, $industry = null, $address = null, $city = null, $postalCode = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling createAccount');
        }
        // verify the required parameter 'firstName' is set
        if ($firstName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $firstName when calling createAccount');
        }
        // verify the required parameter 'lastName' is set
        if ($lastName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lastName when calling createAccount');
        }
        // verify the required parameter 'emailAddress' is set
        if ($emailAddress === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailAddress when calling createAccount');
        }
        // verify the required parameter 'companyName' is set
        if ($companyName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $companyName when calling createAccount');
        }
        // verify the required parameter 'phone' is set
        if ($phone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone when calling createAccount');
        }
        // parse inputs
        $resourcePath = "/accounts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($teamId !== null) {
            $formParams['teamId'] = $this->apiClient->getSerializer()->toFormValue($teamId);
        }
        // form params
        if ($firstName !== null) {
            $formParams['firstName'] = $this->apiClient->getSerializer()->toFormValue($firstName);
        }
        // form params
        if ($lastName !== null) {
            $formParams['lastName'] = $this->apiClient->getSerializer()->toFormValue($lastName);
        }
        // form params
        if ($emailAddress !== null) {
            $formParams['emailAddress'] = $this->apiClient->getSerializer()->toFormValue($emailAddress);
        }
        // form params
        if ($companyName !== null) {
            $formParams['companyName'] = $this->apiClient->getSerializer()->toFormValue($companyName);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = $this->apiClient->getSerializer()->toFormValue($phone);
        }
        // form params
        if ($country !== null) {
            $formParams['country'] = $this->apiClient->getSerializer()->toFormValue($country);
        }
        // form params
        if ($industry !== null) {
            $formParams['industry'] = $this->apiClient->getSerializer()->toFormValue($industry);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($postalCode !== null) {
            $formParams['postalCode'] = $this->apiClient->getSerializer()->toFormValue($postalCode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/accounts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionPurchaseAllowed
     *
     * Check if subscription purchase allowed.
     *
     * @param string $email Your login email address (optional)
     * @param string $pw Your password (optional)
     * @param string $apiKey Your Api Key (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function subscriptionPurchaseAllowed($email = null, $pw = null, $apiKey = null)
    {
        list($response) = $this->subscriptionPurchaseAllowedWithHttpInfo($email, $pw, $apiKey);
        return $response;
    }

    /**
     * Operation subscriptionPurchaseAllowedWithHttpInfo
     *
     * Check if subscription purchase allowed.
     *
     * @param string $email Your login email address (optional)
     * @param string $pw Your password (optional)
     * @param string $apiKey Your Api Key (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function subscriptionPurchaseAllowedWithHttpInfo($email = null, $pw = null, $apiKey = null)
    {
        // parse inputs
        $resourcePath = "/accounts/purchaseable";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($pw !== null) {
            $queryParams['pw'] = $this->apiClient->getSerializer()->toQueryValue($pw);
        }
        // query params
        if ($apiKey !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($apiKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/accounts/purchaseable'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
