<?php
/**
 * TeamsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * TeamsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeamsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bombbomb.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return TeamsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addTeamMember
     *
     * Add Member to Team
     *
     * @param string $teamId The team id (required)
     * @param string $userId The user id of the member being added to the team. (optional)
     * @param string $userEmail The email of the member being added to the team. (optional)
     * @param bool $admin Set if the user is an admin of this team. (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addTeamMember($teamId, $userId = null, $userEmail = null, $admin = null)
    {
        list($response) = $this->addTeamMemberWithHttpInfo($teamId, $userId, $userEmail, $admin);
        return $response;
    }

    /**
     * Operation addTeamMemberWithHttpInfo
     *
     * Add Member to Team
     *
     * @param string $teamId The team id (required)
     * @param string $userId The user id of the member being added to the team. (optional)
     * @param string $userEmail The email of the member being added to the team. (optional)
     * @param bool $admin Set if the user is an admin of this team. (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addTeamMemberWithHttpInfo($teamId, $userId = null, $userEmail = null, $admin = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling addTeamMember');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/member";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($userId !== null) {
            $formParams['userId'] = $this->apiClient->getSerializer()->toFormValue($userId);
        }
        // form params
        if ($userEmail !== null) {
            $formParams['userEmail'] = $this->apiClient->getSerializer()->toFormValue($userEmail);
        }
        // form params
        if ($admin !== null) {
            $formParams['admin'] = $this->apiClient->getSerializer()->toFormValue($admin);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/team/{teamId}/member'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelJerichoSend
     *
     * Cancel a Jericho Send
     *
     * @param string $jerichoId ID of the Jericho Job to cancel (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelJerichoSend($jerichoId)
    {
        list($response) = $this->cancelJerichoSendWithHttpInfo($jerichoId);
        return $response;
    }

    /**
     * Operation cancelJerichoSendWithHttpInfo
     *
     * Cancel a Jericho Send
     *
     * @param string $jerichoId ID of the Jericho Job to cancel (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelJerichoSendWithHttpInfo($jerichoId)
    {
        // verify the required parameter 'jerichoId' is set
        if ($jerichoId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $jerichoId when calling cancelJerichoSend');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/jericho/{jerichoId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($jerichoId !== null) {
            $resourcePath = str_replace(
                "{" . "jerichoId" . "}",
                $this->apiClient->getSerializer()->toPathValue($jerichoId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/team/{teamId}/jericho/{jerichoId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation createSubteam
     *
     * Add a Subteam
     *
     * @param string $teamId The team id (required)
     * @param string $name The subteam&#39;s name. (required)
     * @return \Swagger\Client\Model\TeamPublicRepresentation
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createSubteam($teamId, $name)
    {
        list($response) = $this->createSubteamWithHttpInfo($teamId, $name);
        return $response;
    }

    /**
     * Operation createSubteamWithHttpInfo
     *
     * Add a Subteam
     *
     * @param string $teamId The team id (required)
     * @param string $name The subteam&#39;s name. (required)
     * @return Array of \Swagger\Client\Model\TeamPublicRepresentation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createSubteamWithHttpInfo($teamId, $name)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling createSubteam');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSubteam');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/subteam";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPublicRepresentation',
                '/team/{teamId}/subteam'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPublicRepresentation', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPublicRepresentation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSubteam
     *
     * Delete Subteam
     *
     * @param string $teamId The team id (required)
     * @param string $subteamId The subteam you wish to delete. (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteSubteam($teamId, $subteamId)
    {
        list($response) = $this->deleteSubteamWithHttpInfo($teamId, $subteamId);
        return $response;
    }

    /**
     * Operation deleteSubteamWithHttpInfo
     *
     * Delete Subteam
     *
     * @param string $teamId The team id (required)
     * @param string $subteamId The subteam you wish to delete. (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteSubteamWithHttpInfo($teamId, $subteamId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling deleteSubteam');
        }
        // verify the required parameter 'subteamId' is set
        if ($subteamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subteamId when calling deleteSubteam');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/subteam";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($subteamId !== null) {
            $formParams['subteamId'] = $this->apiClient->getSerializer()->toFormValue($subteamId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/team/{teamId}/subteam'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllClientGroupAssociations
     *
     * Lists team associations
     *
     * @param string $clientId The clientId requesting group associations. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllClientGroupAssociations($clientId)
    {
        list($response) = $this->getAllClientGroupAssociationsWithHttpInfo($clientId);
        return $response;
    }

    /**
     * Operation getAllClientGroupAssociationsWithHttpInfo
     *
     * Lists team associations
     *
     * @param string $clientId The clientId requesting group associations. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllClientGroupAssociationsWithHttpInfo($clientId)
    {
        // verify the required parameter 'clientId' is set
        if ($clientId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientId when calling getAllClientGroupAssociations');
        }
        // parse inputs
        $resourcePath = "/team/associations/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($clientId !== null) {
            $queryParams['clientId'] = $this->apiClient->getSerializer()->toQueryValue($clientId);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/team/associations/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getClientGroupAssets
     *
     * Lists team assets
     *
     * @param string $assetType The type of assets. (required)
     * @param string $teamId The team containing the assets. (optional)
     * @param string $autoTagName The auto tag name containing the assets. (optional)
     * @param string $pageSize The number of items to retrieve in a single db query. (optional)
     * @param string $page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param string $search Search words. (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getClientGroupAssets($assetType, $teamId = null, $autoTagName = null, $pageSize = null, $page = null, $search = null)
    {
        list($response) = $this->getClientGroupAssetsWithHttpInfo($assetType, $teamId, $autoTagName, $pageSize, $page, $search);
        return $response;
    }

    /**
     * Operation getClientGroupAssetsWithHttpInfo
     *
     * Lists team assets
     *
     * @param string $assetType The type of assets. (required)
     * @param string $teamId The team containing the assets. (optional)
     * @param string $autoTagName The auto tag name containing the assets. (optional)
     * @param string $pageSize The number of items to retrieve in a single db query. (optional)
     * @param string $page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param string $search Search words. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getClientGroupAssetsWithHttpInfo($assetType, $teamId = null, $autoTagName = null, $pageSize = null, $page = null, $search = null)
    {
        // verify the required parameter 'assetType' is set
        if ($assetType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assetType when calling getClientGroupAssets');
        }
        // parse inputs
        $resourcePath = "/team/assets/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($assetType !== null) {
            $queryParams['assetType'] = $this->apiClient->getSerializer()->toQueryValue($assetType);
        }
        // query params
        if ($teamId !== null) {
            $queryParams['teamId'] = $this->apiClient->getSerializer()->toQueryValue($teamId);
        }
        // query params
        if ($autoTagName !== null) {
            $queryParams['autoTagName'] = $this->apiClient->getSerializer()->toQueryValue($autoTagName);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($pageSize);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/team/assets/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClientGroupStatistics
     *
     * Get Team statistics
     *
     * @param string $teamId The team id (required)
     * @param string $memberStatus The status of members to query for (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getClientGroupStatistics($teamId, $memberStatus = null)
    {
        list($response) = $this->getClientGroupStatisticsWithHttpInfo($teamId, $memberStatus);
        return $response;
    }

    /**
     * Operation getClientGroupStatisticsWithHttpInfo
     *
     * Get Team statistics
     *
     * @param string $teamId The team id (required)
     * @param string $memberStatus The status of members to query for (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getClientGroupStatisticsWithHttpInfo($teamId, $memberStatus = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling getClientGroupStatistics');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/stats";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($memberStatus !== null) {
            $queryParams['memberStatus'] = $this->apiClient->getSerializer()->toQueryValue($memberStatus);
        }
        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/team/{teamId}/stats'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getJerichoSends
     *
     * List Jericho Sends
     *
     * @param string $teamId The team whose Jericho sends you wish to see. (required)
     * @return \Swagger\Client\Model\JerichoConfiguration[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getJerichoSends($teamId)
    {
        list($response) = $this->getJerichoSendsWithHttpInfo($teamId);
        return $response;
    }

    /**
     * Operation getJerichoSendsWithHttpInfo
     *
     * List Jericho Sends
     *
     * @param string $teamId The team whose Jericho sends you wish to see. (required)
     * @return Array of \Swagger\Client\Model\JerichoConfiguration[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getJerichoSendsWithHttpInfo($teamId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling getJerichoSends');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/jericho";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\JerichoConfiguration[]',
                '/team/{teamId}/jericho'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\JerichoConfiguration[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\JerichoConfiguration[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJerichoStats
     *
     * Gets Jericho performance statistics
     *
     * @param string $jerichoId ID of the Jericho job (required)
     * @param string $teamId ID of team through which Jericho was sent (required)
     * @return \Swagger\Client\Model\JerichoPerformance
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getJerichoStats($jerichoId, $teamId)
    {
        list($response) = $this->getJerichoStatsWithHttpInfo($jerichoId, $teamId);
        return $response;
    }

    /**
     * Operation getJerichoStatsWithHttpInfo
     *
     * Gets Jericho performance statistics
     *
     * @param string $jerichoId ID of the Jericho job (required)
     * @param string $teamId ID of team through which Jericho was sent (required)
     * @return Array of \Swagger\Client\Model\JerichoPerformance, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getJerichoStatsWithHttpInfo($jerichoId, $teamId)
    {
        // verify the required parameter 'jerichoId' is set
        if ($jerichoId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $jerichoId when calling getJerichoStats');
        }
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling getJerichoStats');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/jericho/{jerichoId}/performance";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($jerichoId !== null) {
            $resourcePath = str_replace(
                "{" . "jerichoId" . "}",
                $this->apiClient->getSerializer()->toPathValue($jerichoId),
                $resourcePath
            );
        }
        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\JerichoPerformance',
                '/team/{teamId}/jericho/{jerichoId}/performance'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\JerichoPerformance', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\JerichoPerformance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPagedClientGroupMembers
     *
     * List Team Members
     *
     * @param string $teamId The team id (required)
     * @param string $pageSize Amount of records to return in a page. (required)
     * @param string $page The page to return. (required)
     * @param string $status The status type to filter by. (optional)
     * @param string $search Filter results with names that match the search term. (optional)
     * @param string $orderBy Key to order results by (optional)
     * @param string $orderDirection ASC or DESC (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPagedClientGroupMembers($teamId, $pageSize, $page, $status = null, $search = null, $orderBy = null, $orderDirection = null)
    {
        list($response) = $this->getPagedClientGroupMembersWithHttpInfo($teamId, $pageSize, $page, $status, $search, $orderBy, $orderDirection);
        return $response;
    }

    /**
     * Operation getPagedClientGroupMembersWithHttpInfo
     *
     * List Team Members
     *
     * @param string $teamId The team id (required)
     * @param string $pageSize Amount of records to return in a page. (required)
     * @param string $page The page to return. (required)
     * @param string $status The status type to filter by. (optional)
     * @param string $search Filter results with names that match the search term. (optional)
     * @param string $orderBy Key to order results by (optional)
     * @param string $orderDirection ASC or DESC (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPagedClientGroupMembersWithHttpInfo($teamId, $pageSize, $page, $status = null, $search = null, $orderBy = null, $orderDirection = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling getPagedClientGroupMembers');
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pageSize when calling getPagedClientGroupMembers');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling getPagedClientGroupMembers');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($pageSize);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($orderBy);
        }
        // query params
        if ($orderDirection !== null) {
            $queryParams['orderDirection'] = $this->apiClient->getSerializer()->toQueryValue($orderDirection);
        }
        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/team/{teamId}/members'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getSubteams
     *
     * List Subteams
     *
     * @param string $teamId The team id (required)
     * @return \Swagger\Client\Model\TeamPublicRepresentation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubteams($teamId)
    {
        list($response) = $this->getSubteamsWithHttpInfo($teamId);
        return $response;
    }

    /**
     * Operation getSubteamsWithHttpInfo
     *
     * List Subteams
     *
     * @param string $teamId The team id (required)
     * @return Array of \Swagger\Client\Model\TeamPublicRepresentation[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubteamsWithHttpInfo($teamId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling getSubteams');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/subteam";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPublicRepresentation[]',
                '/team/{teamId}/subteam'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPublicRepresentation[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPublicRepresentation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTeamPromptAggregateStats
     *
     * Get aggregate stats for campaigns
     *
     * @param string $clientGroupId ID of the client group association (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTeamPromptAggregateStats($clientGroupId)
    {
        list($response) = $this->getTeamPromptAggregateStatsWithHttpInfo($clientGroupId);
        return $response;
    }

    /**
     * Operation getTeamPromptAggregateStatsWithHttpInfo
     *
     * Get aggregate stats for campaigns
     *
     * @param string $clientGroupId ID of the client group association (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTeamPromptAggregateStatsWithHttpInfo($clientGroupId)
    {
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientGroupId when calling getTeamPromptAggregateStats');
        }
        // parse inputs
        $resourcePath = "/team/{clientGroupId}/campaign/stats";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($clientGroupId !== null) {
            $resourcePath = str_replace(
                "{" . "clientGroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clientGroupId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/team/{clientGroupId}/campaign/stats'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTeamPromptCampaigns
     *
     * Get campaigns for team
     *
     * @param string $clientGroupId ID of the client group association (required)
     * @param string $searchTerm The value to search for in prompt subject (optional)
     * @param string $orderBy How to sort the column (optional)
     * @param string $asc Ascending or not (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTeamPromptCampaigns($clientGroupId, $searchTerm = null, $orderBy = null, $asc = null)
    {
        list($response) = $this->getTeamPromptCampaignsWithHttpInfo($clientGroupId, $searchTerm, $orderBy, $asc);
        return $response;
    }

    /**
     * Operation getTeamPromptCampaignsWithHttpInfo
     *
     * Get campaigns for team
     *
     * @param string $clientGroupId ID of the client group association (required)
     * @param string $searchTerm The value to search for in prompt subject (optional)
     * @param string $orderBy How to sort the column (optional)
     * @param string $asc Ascending or not (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTeamPromptCampaignsWithHttpInfo($clientGroupId, $searchTerm = null, $orderBy = null, $asc = null)
    {
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientGroupId when calling getTeamPromptCampaigns');
        }
        // parse inputs
        $resourcePath = "/team/{clientGroupId}/campaign";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if ($searchTerm !== null) {
            $queryParams['searchTerm'] = $this->apiClient->getSerializer()->toQueryValue($searchTerm);
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($orderBy);
        }
        // query params
        if ($asc !== null) {
            $queryParams['asc'] = $this->apiClient->getSerializer()->toQueryValue($asc);
        }
        // path params
        if ($clientGroupId !== null) {
            $resourcePath = str_replace(
                "{" . "clientGroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clientGroupId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/team/{clientGroupId}/campaign'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation queueJerichoSend
     *
     * Creates a Jericho send.
     *
     * @param \Swagger\Client\Model\JerichoConfiguration $config JSON representing a Jericho configuration (required)
     * @param string $teamId The ID of the team. (required)
     * @return \Swagger\Client\Model\JerichoConfiguration
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function queueJerichoSend($config, $teamId)
    {
        list($response) = $this->queueJerichoSendWithHttpInfo($config, $teamId);
        return $response;
    }

    /**
     * Operation queueJerichoSendWithHttpInfo
     *
     * Creates a Jericho send.
     *
     * @param \Swagger\Client\Model\JerichoConfiguration $config JSON representing a Jericho configuration (required)
     * @param string $teamId The ID of the team. (required)
     * @return Array of \Swagger\Client\Model\JerichoConfiguration, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function queueJerichoSendWithHttpInfo($config, $teamId)
    {
        // verify the required parameter 'config' is set
        if ($config === null) {
            throw new \InvalidArgumentException('Missing the required parameter $config when calling queueJerichoSend');
        }
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling queueJerichoSend');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/jericho";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($config)) {
            $_tempBody = $config;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\JerichoConfiguration',
                '/team/{teamId}/jericho'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\JerichoConfiguration', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\JerichoConfiguration', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeMemberFromTeam
     *
     * Remove Member from Team
     *
     * @param string $teamId The team id (required)
     * @param string $userId The user id of the member being removed. (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeMemberFromTeam($teamId, $userId)
    {
        list($response) = $this->removeMemberFromTeamWithHttpInfo($teamId, $userId);
        return $response;
    }

    /**
     * Operation removeMemberFromTeamWithHttpInfo
     *
     * Remove Member from Team
     *
     * @param string $teamId The team id (required)
     * @param string $userId The user id of the member being removed. (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeMemberFromTeamWithHttpInfo($teamId, $userId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling removeMemberFromTeam');
        }
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userId when calling removeMemberFromTeam');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/member/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($userId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/team/{teamId}/member/{userId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resendTeamMemberInvitation
     *
     * Resend invite
     *
     * @param string $teamId The team id (required)
     * @param string $memberUserId The user id of the member being resent an invitation. (required)
     * @return \Swagger\Client\Model\TeamPublicRepresentation
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resendTeamMemberInvitation($teamId, $memberUserId)
    {
        list($response) = $this->resendTeamMemberInvitationWithHttpInfo($teamId, $memberUserId);
        return $response;
    }

    /**
     * Operation resendTeamMemberInvitationWithHttpInfo
     *
     * Resend invite
     *
     * @param string $teamId The team id (required)
     * @param string $memberUserId The user id of the member being resent an invitation. (required)
     * @return Array of \Swagger\Client\Model\TeamPublicRepresentation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resendTeamMemberInvitationWithHttpInfo($teamId, $memberUserId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling resendTeamMemberInvitation');
        }
        // verify the required parameter 'memberUserId' is set
        if ($memberUserId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $memberUserId when calling resendTeamMemberInvitation');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/{memberUserId}/rewelcome";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // path params
        if ($memberUserId !== null) {
            $resourcePath = str_replace(
                "{" . "memberUserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($memberUserId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPublicRepresentation',
                '/team/{teamId}/{memberUserId}/rewelcome'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPublicRepresentation', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPublicRepresentation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJerichoPromptSend
     *
     * Updates the Jericho Prompt Settings
     *
     * @param string $teamId The team id (required)
     * @param string $jerichoId ID of the Jericho job (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateJerichoPromptSend($teamId, $jerichoId)
    {
        list($response) = $this->updateJerichoPromptSendWithHttpInfo($teamId, $jerichoId);
        return $response;
    }

    /**
     * Operation updateJerichoPromptSendWithHttpInfo
     *
     * Updates the Jericho Prompt Settings
     *
     * @param string $teamId The team id (required)
     * @param string $jerichoId ID of the Jericho job (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateJerichoPromptSendWithHttpInfo($teamId, $jerichoId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling updateJerichoPromptSend');
        }
        // verify the required parameter 'jerichoId' is set
        if ($jerichoId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $jerichoId when calling updateJerichoPromptSend');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/jericho/{jerichoId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // path params
        if ($jerichoId !== null) {
            $resourcePath = str_replace(
                "{" . "jerichoId" . "}",
                $this->apiClient->getSerializer()->toPathValue($jerichoId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/team/{teamId}/jericho/{jerichoId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateTeam
     *
     * Update a team
     *
     * @param string $teamId The team id (required)
     * @param string $name The name of the team (optional)
     * @param string $state The status of the login permissions (optional)
     * @return \Swagger\Client\Model\TeamPublicRepresentation
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateTeam($teamId, $name = null, $state = null)
    {
        list($response) = $this->updateTeamWithHttpInfo($teamId, $name, $state);
        return $response;
    }

    /**
     * Operation updateTeamWithHttpInfo
     *
     * Update a team
     *
     * @param string $teamId The team id (required)
     * @param string $name The name of the team (optional)
     * @param string $state The status of the login permissions (optional)
     * @return Array of \Swagger\Client\Model\TeamPublicRepresentation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateTeamWithHttpInfo($teamId, $name = null, $state = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling updateTeam');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPublicRepresentation',
                '/team/{teamId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPublicRepresentation', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPublicRepresentation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTeamMember
     *
     * Update Member of Team
     *
     * @param string $teamId The team id (required)
     * @param string $userId The user id of the member being added to the team. (required)
     * @param bool $admin Set if the user is an admin of this team. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateTeamMember($teamId, $userId, $admin)
    {
        list($response) = $this->updateTeamMemberWithHttpInfo($teamId, $userId, $admin);
        return $response;
    }

    /**
     * Operation updateTeamMemberWithHttpInfo
     *
     * Update Member of Team
     *
     * @param string $teamId The team id (required)
     * @param string $userId The user id of the member being added to the team. (required)
     * @param bool $admin Set if the user is an admin of this team. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateTeamMemberWithHttpInfo($teamId, $userId, $admin)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling updateTeamMember');
        }
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userId when calling updateTeamMember');
        }
        // verify the required parameter 'admin' is set
        if ($admin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $admin when calling updateTeamMember');
        }
        // parse inputs
        $resourcePath = "/team/{teamId}/member";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($userId !== null) {
            $formParams['userId'] = $this->apiClient->getSerializer()->toFormValue($userId);
        }
        // form params
        if ($admin !== null) {
            $formParams['admin'] = $this->apiClient->getSerializer()->toFormValue($admin);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/team/{teamId}/member'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
