<?php
/**
 * TeamsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TeamsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeamsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addTeamMember
     *
     * Add Member to Team
     *
     * @param  string $teamId The team id (required)
     * @param  bool $admin Set if the user is an admin of this team. (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     * @param  string $userEmail The email of the member being added to the team. (optional)
     * @param  string $userId The user id of the member being added to the team. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function addTeamMember($teamId, $admin = null, $subgroupIds = null, $userEmail = null, $userId = null)
    {
        list($response) = $this->addTeamMemberWithHttpInfo($teamId, $admin, $subgroupIds, $userEmail, $userId);
        return $response;
    }

    /**
     * Operation addTeamMemberWithHttpInfo
     *
     * Add Member to Team
     *
     * @param  string $teamId The team id (required)
     * @param  bool $admin Set if the user is an admin of this team. (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     * @param  string $userEmail The email of the member being added to the team. (optional)
     * @param  string $userId The user id of the member being added to the team. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTeamMemberWithHttpInfo($teamId, $admin = null, $subgroupIds = null, $userEmail = null, $userId = null)
    {
        $returnType = 'string';
        $request = $this->addTeamMemberRequest($teamId, $admin, $subgroupIds, $userEmail, $userId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addTeamMemberAsync
     *
     * Add Member to Team
     *
     * @param  string $teamId The team id (required)
     * @param  bool $admin Set if the user is an admin of this team. (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     * @param  string $userEmail The email of the member being added to the team. (optional)
     * @param  string $userId The user id of the member being added to the team. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTeamMemberAsync($teamId, $admin = null, $subgroupIds = null, $userEmail = null, $userId = null)
    {
        return $this->addTeamMemberAsyncWithHttpInfo($teamId, $admin, $subgroupIds, $userEmail, $userId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTeamMemberAsyncWithHttpInfo
     *
     * Add Member to Team
     *
     * @param  string $teamId The team id (required)
     * @param  bool $admin Set if the user is an admin of this team. (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     * @param  string $userEmail The email of the member being added to the team. (optional)
     * @param  string $userId The user id of the member being added to the team. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTeamMemberAsyncWithHttpInfo($teamId, $admin = null, $subgroupIds = null, $userEmail = null, $userId = null)
    {
        $returnType = 'string';
        $request = $this->addTeamMemberRequest($teamId, $admin, $subgroupIds, $userEmail, $userId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTeamMember'
     *
     * @param  string $teamId The team id (required)
     * @param  bool $admin Set if the user is an admin of this team. (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     * @param  string $userEmail The email of the member being added to the team. (optional)
     * @param  string $userId The user id of the member being added to the team. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addTeamMemberRequest($teamId, $admin = null, $subgroupIds = null, $userEmail = null, $userId = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling addTeamMember'
            );
        }

        $resourcePath = '/team/{teamId}/member';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // form params
        if ($admin !== null) {
            $formParams['admin'] = ObjectSerializer::toFormValue($admin);
        }
        // form params
        if ($subgroupIds !== null) {
            $formParams['subgroupIds'] = ObjectSerializer::toFormValue($subgroupIds);
        }
        // form params
        if ($userEmail !== null) {
            $formParams['userEmail'] = ObjectSerializer::toFormValue($userEmail);
        }
        // form params
        if ($userId !== null) {
            $formParams['userId'] = ObjectSerializer::toFormValue($userId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addUsers
     *
     * Add users to group.
     *
     * @param  string $teamId The team id (required)
     * @param  string $userDetails Array of emails or objects containing details needed to create user (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addUsers($teamId, $userDetails, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        $this->addUsersWithHttpInfo($teamId, $userDetails, $sendWelcomeEmail, $subgroupIds);
    }

    /**
     * Operation addUsersWithHttpInfo
     *
     * Add users to group.
     *
     * @param  string $teamId The team id (required)
     * @param  string $userDetails Array of emails or objects containing details needed to create user (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUsersWithHttpInfo($teamId, $userDetails, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        $returnType = '';
        $request = $this->addUsersRequest($teamId, $userDetails, $sendWelcomeEmail, $subgroupIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addUsersAsync
     *
     * Add users to group.
     *
     * @param  string $teamId The team id (required)
     * @param  string $userDetails Array of emails or objects containing details needed to create user (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUsersAsync($teamId, $userDetails, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        return $this->addUsersAsyncWithHttpInfo($teamId, $userDetails, $sendWelcomeEmail, $subgroupIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addUsersAsyncWithHttpInfo
     *
     * Add users to group.
     *
     * @param  string $teamId The team id (required)
     * @param  string $userDetails Array of emails or objects containing details needed to create user (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUsersAsyncWithHttpInfo($teamId, $userDetails, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        $returnType = '';
        $request = $this->addUsersRequest($teamId, $userDetails, $sendWelcomeEmail, $subgroupIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addUsers'
     *
     * @param  string $teamId The team id (required)
     * @param  string $userDetails Array of emails or objects containing details needed to create user (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addUsersRequest($teamId, $userDetails, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling addUsers'
            );
        }
        // verify the required parameter 'userDetails' is set
        if ($userDetails === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userDetails when calling addUsers'
            );
        }

        $resourcePath = '/team/{teamId}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // form params
        if ($userDetails !== null) {
            $formParams['userDetails'] = ObjectSerializer::toFormValue($userDetails);
        }
        // form params
        if ($sendWelcomeEmail !== null) {
            $formParams['sendWelcomeEmail'] = ObjectSerializer::toFormValue($sendWelcomeEmail);
        }
        // form params
        if ($subgroupIds !== null) {
            $formParams['subgroupIds'] = ObjectSerializer::toFormValue($subgroupIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addUsersFromCsv
     *
     * Add members to group from CSV
     *
     * @param  string $teamId The team id (required)
     * @param  string $csvImportId ID of the CSV to import (required)
     * @param  string $map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addUsersFromCsv($teamId, $csvImportId, $map, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        $this->addUsersFromCsvWithHttpInfo($teamId, $csvImportId, $map, $sendWelcomeEmail, $subgroupIds);
    }

    /**
     * Operation addUsersFromCsvWithHttpInfo
     *
     * Add members to group from CSV
     *
     * @param  string $teamId The team id (required)
     * @param  string $csvImportId ID of the CSV to import (required)
     * @param  string $map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUsersFromCsvWithHttpInfo($teamId, $csvImportId, $map, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        $returnType = '';
        $request = $this->addUsersFromCsvRequest($teamId, $csvImportId, $map, $sendWelcomeEmail, $subgroupIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addUsersFromCsvAsync
     *
     * Add members to group from CSV
     *
     * @param  string $teamId The team id (required)
     * @param  string $csvImportId ID of the CSV to import (required)
     * @param  string $map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUsersFromCsvAsync($teamId, $csvImportId, $map, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        return $this->addUsersFromCsvAsyncWithHttpInfo($teamId, $csvImportId, $map, $sendWelcomeEmail, $subgroupIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addUsersFromCsvAsyncWithHttpInfo
     *
     * Add members to group from CSV
     *
     * @param  string $teamId The team id (required)
     * @param  string $csvImportId ID of the CSV to import (required)
     * @param  string $map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUsersFromCsvAsyncWithHttpInfo($teamId, $csvImportId, $map, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        $returnType = '';
        $request = $this->addUsersFromCsvRequest($teamId, $csvImportId, $map, $sendWelcomeEmail, $subgroupIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addUsersFromCsv'
     *
     * @param  string $teamId The team id (required)
     * @param  string $csvImportId ID of the CSV to import (required)
     * @param  string $map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
     * @param  string $sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param  string $subgroupIds Subgroup IDs to add user to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addUsersFromCsvRequest($teamId, $csvImportId, $map, $sendWelcomeEmail = null, $subgroupIds = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling addUsersFromCsv'
            );
        }
        // verify the required parameter 'csvImportId' is set
        if ($csvImportId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $csvImportId when calling addUsersFromCsv'
            );
        }
        // verify the required parameter 'map' is set
        if ($map === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $map when calling addUsersFromCsv'
            );
        }

        $resourcePath = '/team/{teamId}/members/csv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // form params
        if ($csvImportId !== null) {
            $formParams['csvImportId'] = ObjectSerializer::toFormValue($csvImportId);
        }
        // form params
        if ($map !== null) {
            $formParams['map'] = ObjectSerializer::toFormValue($map);
        }
        // form params
        if ($sendWelcomeEmail !== null) {
            $formParams['sendWelcomeEmail'] = ObjectSerializer::toFormValue($sendWelcomeEmail);
        }
        // form params
        if ($subgroupIds !== null) {
            $formParams['subgroupIds'] = ObjectSerializer::toFormValue($subgroupIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelJerichoSend
     *
     * Cancel a Jericho Send
     *
     * @param  string $jerichoId ID of the Jericho Job to cancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelJerichoSend($jerichoId)
    {
        $this->cancelJerichoSendWithHttpInfo($jerichoId);
    }

    /**
     * Operation cancelJerichoSendWithHttpInfo
     *
     * Cancel a Jericho Send
     *
     * @param  string $jerichoId ID of the Jericho Job to cancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelJerichoSendWithHttpInfo($jerichoId)
    {
        $returnType = '';
        $request = $this->cancelJerichoSendRequest($jerichoId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelJerichoSendAsync
     *
     * Cancel a Jericho Send
     *
     * @param  string $jerichoId ID of the Jericho Job to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelJerichoSendAsync($jerichoId)
    {
        return $this->cancelJerichoSendAsyncWithHttpInfo($jerichoId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelJerichoSendAsyncWithHttpInfo
     *
     * Cancel a Jericho Send
     *
     * @param  string $jerichoId ID of the Jericho Job to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelJerichoSendAsyncWithHttpInfo($jerichoId)
    {
        $returnType = '';
        $request = $this->cancelJerichoSendRequest($jerichoId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelJerichoSend'
     *
     * @param  string $jerichoId ID of the Jericho Job to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelJerichoSendRequest($jerichoId)
    {
        // verify the required parameter 'jerichoId' is set
        if ($jerichoId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jerichoId when calling cancelJerichoSend'
            );
        }

        $resourcePath = '/team/{teamId}/jericho/{jerichoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jerichoId !== null) {
            $resourcePath = str_replace(
                '{' . 'jerichoId' . '}',
                ObjectSerializer::toPathValue($jerichoId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubteam
     *
     * Add a Subteam
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The subteam&#39;s name. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TeamPublicRepresentation
     */
    public function createSubteam($teamId, $name)
    {
        list($response) = $this->createSubteamWithHttpInfo($teamId, $name);
        return $response;
    }

    /**
     * Operation createSubteamWithHttpInfo
     *
     * Add a Subteam
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The subteam&#39;s name. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TeamPublicRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubteamWithHttpInfo($teamId, $name)
    {
        $returnType = '\Swagger\Client\Model\TeamPublicRepresentation';
        $request = $this->createSubteamRequest($teamId, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TeamPublicRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSubteamAsync
     *
     * Add a Subteam
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The subteam&#39;s name. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubteamAsync($teamId, $name)
    {
        return $this->createSubteamAsyncWithHttpInfo($teamId, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubteamAsyncWithHttpInfo
     *
     * Add a Subteam
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The subteam&#39;s name. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubteamAsyncWithHttpInfo($teamId, $name)
    {
        $returnType = '\Swagger\Client\Model\TeamPublicRepresentation';
        $request = $this->createSubteamRequest($teamId, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubteam'
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The subteam&#39;s name. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubteamRequest($teamId, $name)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling createSubteam'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling createSubteam'
            );
        }

        $resourcePath = '/team/{teamId}/subteam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubteam
     *
     * Delete Subteam
     *
     * @param  string $teamId The team id (required)
     * @param  string $subteamId The subteam you wish to delete. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function deleteSubteam($teamId, $subteamId)
    {
        list($response) = $this->deleteSubteamWithHttpInfo($teamId, $subteamId);
        return $response;
    }

    /**
     * Operation deleteSubteamWithHttpInfo
     *
     * Delete Subteam
     *
     * @param  string $teamId The team id (required)
     * @param  string $subteamId The subteam you wish to delete. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubteamWithHttpInfo($teamId, $subteamId)
    {
        $returnType = 'string';
        $request = $this->deleteSubteamRequest($teamId, $subteamId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSubteamAsync
     *
     * Delete Subteam
     *
     * @param  string $teamId The team id (required)
     * @param  string $subteamId The subteam you wish to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubteamAsync($teamId, $subteamId)
    {
        return $this->deleteSubteamAsyncWithHttpInfo($teamId, $subteamId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubteamAsyncWithHttpInfo
     *
     * Delete Subteam
     *
     * @param  string $teamId The team id (required)
     * @param  string $subteamId The subteam you wish to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubteamAsyncWithHttpInfo($teamId, $subteamId)
    {
        $returnType = 'string';
        $request = $this->deleteSubteamRequest($teamId, $subteamId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubteam'
     *
     * @param  string $teamId The team id (required)
     * @param  string $subteamId The subteam you wish to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubteamRequest($teamId, $subteamId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling deleteSubteam'
            );
        }
        // verify the required parameter 'subteamId' is set
        if ($subteamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subteamId when calling deleteSubteam'
            );
        }

        $resourcePath = '/team/{teamId}/subteam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // form params
        if ($subteamId !== null) {
            $formParams['subteamId'] = ObjectSerializer::toFormValue($subteamId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllClientGroupAssociations
     *
     * Lists team associations
     *
     * @param  string $clientId The clientId requesting group associations. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAllClientGroupAssociations($clientId)
    {
        $this->getAllClientGroupAssociationsWithHttpInfo($clientId);
    }

    /**
     * Operation getAllClientGroupAssociationsWithHttpInfo
     *
     * Lists team associations
     *
     * @param  string $clientId The clientId requesting group associations. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllClientGroupAssociationsWithHttpInfo($clientId)
    {
        $returnType = '';
        $request = $this->getAllClientGroupAssociationsRequest($clientId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAllClientGroupAssociationsAsync
     *
     * Lists team associations
     *
     * @param  string $clientId The clientId requesting group associations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllClientGroupAssociationsAsync($clientId)
    {
        return $this->getAllClientGroupAssociationsAsyncWithHttpInfo($clientId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllClientGroupAssociationsAsyncWithHttpInfo
     *
     * Lists team associations
     *
     * @param  string $clientId The clientId requesting group associations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllClientGroupAssociationsAsyncWithHttpInfo($clientId)
    {
        $returnType = '';
        $request = $this->getAllClientGroupAssociationsRequest($clientId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllClientGroupAssociations'
     *
     * @param  string $clientId The clientId requesting group associations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllClientGroupAssociationsRequest($clientId)
    {
        // verify the required parameter 'clientId' is set
        if ($clientId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientId when calling getAllClientGroupAssociations'
            );
        }

        $resourcePath = '/team/associations/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($clientId !== null) {
            $queryParams['clientId'] = ObjectSerializer::toQueryValue($clientId);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClientGroupAssets
     *
     * Lists team assets
     *
     * @param  string $assetType The type of assets. (required)
     * @param  string $teamId The team containing the assets. (optional)
     * @param  string $autoTagName The auto tag name containing the assets. (optional)
     * @param  string $pageSize The number of items to retrieve in a single db query. (optional)
     * @param  string $page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param  string $search Search words. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function getClientGroupAssets($assetType, $teamId = null, $autoTagName = null, $pageSize = null, $page = null, $search = null)
    {
        list($response) = $this->getClientGroupAssetsWithHttpInfo($assetType, $teamId, $autoTagName, $pageSize, $page, $search);
        return $response;
    }

    /**
     * Operation getClientGroupAssetsWithHttpInfo
     *
     * Lists team assets
     *
     * @param  string $assetType The type of assets. (required)
     * @param  string $teamId The team containing the assets. (optional)
     * @param  string $autoTagName The auto tag name containing the assets. (optional)
     * @param  string $pageSize The number of items to retrieve in a single db query. (optional)
     * @param  string $page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param  string $search Search words. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientGroupAssetsWithHttpInfo($assetType, $teamId = null, $autoTagName = null, $pageSize = null, $page = null, $search = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->getClientGroupAssetsRequest($assetType, $teamId, $autoTagName, $pageSize, $page, $search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClientGroupAssetsAsync
     *
     * Lists team assets
     *
     * @param  string $assetType The type of assets. (required)
     * @param  string $teamId The team containing the assets. (optional)
     * @param  string $autoTagName The auto tag name containing the assets. (optional)
     * @param  string $pageSize The number of items to retrieve in a single db query. (optional)
     * @param  string $page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param  string $search Search words. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientGroupAssetsAsync($assetType, $teamId = null, $autoTagName = null, $pageSize = null, $page = null, $search = null)
    {
        return $this->getClientGroupAssetsAsyncWithHttpInfo($assetType, $teamId, $autoTagName, $pageSize, $page, $search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientGroupAssetsAsyncWithHttpInfo
     *
     * Lists team assets
     *
     * @param  string $assetType The type of assets. (required)
     * @param  string $teamId The team containing the assets. (optional)
     * @param  string $autoTagName The auto tag name containing the assets. (optional)
     * @param  string $pageSize The number of items to retrieve in a single db query. (optional)
     * @param  string $page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param  string $search Search words. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientGroupAssetsAsyncWithHttpInfo($assetType, $teamId = null, $autoTagName = null, $pageSize = null, $page = null, $search = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->getClientGroupAssetsRequest($assetType, $teamId, $autoTagName, $pageSize, $page, $search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClientGroupAssets'
     *
     * @param  string $assetType The type of assets. (required)
     * @param  string $teamId The team containing the assets. (optional)
     * @param  string $autoTagName The auto tag name containing the assets. (optional)
     * @param  string $pageSize The number of items to retrieve in a single db query. (optional)
     * @param  string $page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param  string $search Search words. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getClientGroupAssetsRequest($assetType, $teamId = null, $autoTagName = null, $pageSize = null, $page = null, $search = null)
    {
        // verify the required parameter 'assetType' is set
        if ($assetType === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assetType when calling getClientGroupAssets'
            );
        }

        $resourcePath = '/team/assets/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($assetType !== null) {
            $queryParams['assetType'] = ObjectSerializer::toQueryValue($assetType);
        }
        // query params
        if ($teamId !== null) {
            $queryParams['teamId'] = ObjectSerializer::toQueryValue($teamId);
        }
        // query params
        if ($autoTagName !== null) {
            $queryParams['autoTagName'] = ObjectSerializer::toQueryValue($autoTagName);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClientGroupStatistics
     *
     * Get Team statistics
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberStatus The status of members to query for (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getClientGroupStatistics($teamId, $memberStatus = null)
    {
        $this->getClientGroupStatisticsWithHttpInfo($teamId, $memberStatus);
    }

    /**
     * Operation getClientGroupStatisticsWithHttpInfo
     *
     * Get Team statistics
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberStatus The status of members to query for (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientGroupStatisticsWithHttpInfo($teamId, $memberStatus = null)
    {
        $returnType = '';
        $request = $this->getClientGroupStatisticsRequest($teamId, $memberStatus);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getClientGroupStatisticsAsync
     *
     * Get Team statistics
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberStatus The status of members to query for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientGroupStatisticsAsync($teamId, $memberStatus = null)
    {
        return $this->getClientGroupStatisticsAsyncWithHttpInfo($teamId, $memberStatus)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientGroupStatisticsAsyncWithHttpInfo
     *
     * Get Team statistics
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberStatus The status of members to query for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientGroupStatisticsAsyncWithHttpInfo($teamId, $memberStatus = null)
    {
        $returnType = '';
        $request = $this->getClientGroupStatisticsRequest($teamId, $memberStatus);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClientGroupStatistics'
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberStatus The status of members to query for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getClientGroupStatisticsRequest($teamId, $memberStatus = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling getClientGroupStatistics'
            );
        }

        $resourcePath = '/team/{teamId}/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($memberStatus !== null) {
            $queryParams['memberStatus'] = ObjectSerializer::toQueryValue($memberStatus);
        }

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJerichoSends
     *
     * List Jericho Sends
     *
     * @param  string $teamId The team whose Jericho sends you wish to see. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\JerichoConfiguration[]
     */
    public function getJerichoSends($teamId)
    {
        list($response) = $this->getJerichoSendsWithHttpInfo($teamId);
        return $response;
    }

    /**
     * Operation getJerichoSendsWithHttpInfo
     *
     * List Jericho Sends
     *
     * @param  string $teamId The team whose Jericho sends you wish to see. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\JerichoConfiguration[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getJerichoSendsWithHttpInfo($teamId)
    {
        $returnType = '\Swagger\Client\Model\JerichoConfiguration[]';
        $request = $this->getJerichoSendsRequest($teamId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\JerichoConfiguration[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJerichoSendsAsync
     *
     * List Jericho Sends
     *
     * @param  string $teamId The team whose Jericho sends you wish to see. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJerichoSendsAsync($teamId)
    {
        return $this->getJerichoSendsAsyncWithHttpInfo($teamId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJerichoSendsAsyncWithHttpInfo
     *
     * List Jericho Sends
     *
     * @param  string $teamId The team whose Jericho sends you wish to see. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJerichoSendsAsyncWithHttpInfo($teamId)
    {
        $returnType = '\Swagger\Client\Model\JerichoConfiguration[]';
        $request = $this->getJerichoSendsRequest($teamId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJerichoSends'
     *
     * @param  string $teamId The team whose Jericho sends you wish to see. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJerichoSendsRequest($teamId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling getJerichoSends'
            );
        }

        $resourcePath = '/team/{teamId}/jericho';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJerichoStats
     *
     * Gets Jericho performance statistics
     *
     * @param  string $jerichoId ID of the Jericho job (required)
     * @param  string $teamId ID of team through which Jericho was sent (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\JerichoPerformance
     */
    public function getJerichoStats($jerichoId, $teamId)
    {
        list($response) = $this->getJerichoStatsWithHttpInfo($jerichoId, $teamId);
        return $response;
    }

    /**
     * Operation getJerichoStatsWithHttpInfo
     *
     * Gets Jericho performance statistics
     *
     * @param  string $jerichoId ID of the Jericho job (required)
     * @param  string $teamId ID of team through which Jericho was sent (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\JerichoPerformance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJerichoStatsWithHttpInfo($jerichoId, $teamId)
    {
        $returnType = '\Swagger\Client\Model\JerichoPerformance';
        $request = $this->getJerichoStatsRequest($jerichoId, $teamId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\JerichoPerformance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJerichoStatsAsync
     *
     * Gets Jericho performance statistics
     *
     * @param  string $jerichoId ID of the Jericho job (required)
     * @param  string $teamId ID of team through which Jericho was sent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJerichoStatsAsync($jerichoId, $teamId)
    {
        return $this->getJerichoStatsAsyncWithHttpInfo($jerichoId, $teamId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJerichoStatsAsyncWithHttpInfo
     *
     * Gets Jericho performance statistics
     *
     * @param  string $jerichoId ID of the Jericho job (required)
     * @param  string $teamId ID of team through which Jericho was sent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJerichoStatsAsyncWithHttpInfo($jerichoId, $teamId)
    {
        $returnType = '\Swagger\Client\Model\JerichoPerformance';
        $request = $this->getJerichoStatsRequest($jerichoId, $teamId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJerichoStats'
     *
     * @param  string $jerichoId ID of the Jericho job (required)
     * @param  string $teamId ID of team through which Jericho was sent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJerichoStatsRequest($jerichoId, $teamId)
    {
        // verify the required parameter 'jerichoId' is set
        if ($jerichoId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jerichoId when calling getJerichoStats'
            );
        }
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling getJerichoStats'
            );
        }

        $resourcePath = '/team/{teamId}/jericho/{jerichoId}/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jerichoId !== null) {
            $resourcePath = str_replace(
                '{' . 'jerichoId' . '}',
                ObjectSerializer::toPathValue($jerichoId),
                $resourcePath
            );
        }
        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagedClientGroupMembers
     *
     * List Team Members
     *
     * @param  string $teamId The team id (required)
     * @param  string $pageSize Amount of records to return in a page. (required)
     * @param  string $page The page to return. (required)
     * @param  string $status The status type to filter by. (optional)
     * @param  string $search Filter results with names that match the search term. (optional)
     * @param  string $orderBy Key to order results by (optional)
     * @param  string $orderDirection ASC or DESC (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getPagedClientGroupMembers($teamId, $pageSize, $page, $status = null, $search = null, $orderBy = null, $orderDirection = null)
    {
        $this->getPagedClientGroupMembersWithHttpInfo($teamId, $pageSize, $page, $status, $search, $orderBy, $orderDirection);
    }

    /**
     * Operation getPagedClientGroupMembersWithHttpInfo
     *
     * List Team Members
     *
     * @param  string $teamId The team id (required)
     * @param  string $pageSize Amount of records to return in a page. (required)
     * @param  string $page The page to return. (required)
     * @param  string $status The status type to filter by. (optional)
     * @param  string $search Filter results with names that match the search term. (optional)
     * @param  string $orderBy Key to order results by (optional)
     * @param  string $orderDirection ASC or DESC (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagedClientGroupMembersWithHttpInfo($teamId, $pageSize, $page, $status = null, $search = null, $orderBy = null, $orderDirection = null)
    {
        $returnType = '';
        $request = $this->getPagedClientGroupMembersRequest($teamId, $pageSize, $page, $status, $search, $orderBy, $orderDirection);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getPagedClientGroupMembersAsync
     *
     * List Team Members
     *
     * @param  string $teamId The team id (required)
     * @param  string $pageSize Amount of records to return in a page. (required)
     * @param  string $page The page to return. (required)
     * @param  string $status The status type to filter by. (optional)
     * @param  string $search Filter results with names that match the search term. (optional)
     * @param  string $orderBy Key to order results by (optional)
     * @param  string $orderDirection ASC or DESC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagedClientGroupMembersAsync($teamId, $pageSize, $page, $status = null, $search = null, $orderBy = null, $orderDirection = null)
    {
        return $this->getPagedClientGroupMembersAsyncWithHttpInfo($teamId, $pageSize, $page, $status, $search, $orderBy, $orderDirection)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagedClientGroupMembersAsyncWithHttpInfo
     *
     * List Team Members
     *
     * @param  string $teamId The team id (required)
     * @param  string $pageSize Amount of records to return in a page. (required)
     * @param  string $page The page to return. (required)
     * @param  string $status The status type to filter by. (optional)
     * @param  string $search Filter results with names that match the search term. (optional)
     * @param  string $orderBy Key to order results by (optional)
     * @param  string $orderDirection ASC or DESC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagedClientGroupMembersAsyncWithHttpInfo($teamId, $pageSize, $page, $status = null, $search = null, $orderBy = null, $orderDirection = null)
    {
        $returnType = '';
        $request = $this->getPagedClientGroupMembersRequest($teamId, $pageSize, $page, $status, $search, $orderBy, $orderDirection);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagedClientGroupMembers'
     *
     * @param  string $teamId The team id (required)
     * @param  string $pageSize Amount of records to return in a page. (required)
     * @param  string $page The page to return. (required)
     * @param  string $status The status type to filter by. (optional)
     * @param  string $search Filter results with names that match the search term. (optional)
     * @param  string $orderBy Key to order results by (optional)
     * @param  string $orderDirection ASC or DESC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPagedClientGroupMembersRequest($teamId, $pageSize, $page, $status = null, $search = null, $orderBy = null, $orderDirection = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling getPagedClientGroupMembers'
            );
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageSize when calling getPagedClientGroupMembers'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getPagedClientGroupMembers'
            );
        }

        $resourcePath = '/team/{teamId}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy);
        }
        // query params
        if ($orderDirection !== null) {
            $queryParams['orderDirection'] = ObjectSerializer::toQueryValue($orderDirection);
        }

        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPromptMonthlyStats
     *
     * Jericho Monthly Stats
     *
     * @param  string $month The month whose Jericho sends you wish to see. (required)
     * @param  string $year The year whose Jericho sends you wish to see. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getPromptMonthlyStats($month, $year)
    {
        list($response) = $this->getPromptMonthlyStatsWithHttpInfo($month, $year);
        return $response;
    }

    /**
     * Operation getPromptMonthlyStatsWithHttpInfo
     *
     * Jericho Monthly Stats
     *
     * @param  string $month The month whose Jericho sends you wish to see. (required)
     * @param  string $year The year whose Jericho sends you wish to see. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPromptMonthlyStatsWithHttpInfo($month, $year)
    {
        $returnType = 'string';
        $request = $this->getPromptMonthlyStatsRequest($month, $year);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPromptMonthlyStatsAsync
     *
     * Jericho Monthly Stats
     *
     * @param  string $month The month whose Jericho sends you wish to see. (required)
     * @param  string $year The year whose Jericho sends you wish to see. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromptMonthlyStatsAsync($month, $year)
    {
        return $this->getPromptMonthlyStatsAsyncWithHttpInfo($month, $year)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPromptMonthlyStatsAsyncWithHttpInfo
     *
     * Jericho Monthly Stats
     *
     * @param  string $month The month whose Jericho sends you wish to see. (required)
     * @param  string $year The year whose Jericho sends you wish to see. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromptMonthlyStatsAsyncWithHttpInfo($month, $year)
    {
        $returnType = 'string';
        $request = $this->getPromptMonthlyStatsRequest($month, $year);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPromptMonthlyStats'
     *
     * @param  string $month The month whose Jericho sends you wish to see. (required)
     * @param  string $year The year whose Jericho sends you wish to see. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPromptMonthlyStatsRequest($month, $year)
    {
        // verify the required parameter 'month' is set
        if ($month === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $month when calling getPromptMonthlyStats'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getPromptMonthlyStats'
            );
        }

        $resourcePath = '/team/{month}/{year}/monthStats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPromptOverview
     *
     * Get Prompt Overview
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getPromptOverview()
    {
        list($response) = $this->getPromptOverviewWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPromptOverviewWithHttpInfo
     *
     * Get Prompt Overview
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPromptOverviewWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->getPromptOverviewRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPromptOverviewAsync
     *
     * Get Prompt Overview
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromptOverviewAsync()
    {
        return $this->getPromptOverviewAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPromptOverviewAsyncWithHttpInfo
     *
     * Get Prompt Overview
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromptOverviewAsyncWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->getPromptOverviewRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPromptOverview'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPromptOverviewRequest()
    {

        $resourcePath = '/team/promptOverview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubteams
     *
     * List Subteams
     *
     * @param  string $teamId The team id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TeamPublicRepresentation[]
     */
    public function getSubteams($teamId)
    {
        list($response) = $this->getSubteamsWithHttpInfo($teamId);
        return $response;
    }

    /**
     * Operation getSubteamsWithHttpInfo
     *
     * List Subteams
     *
     * @param  string $teamId The team id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TeamPublicRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubteamsWithHttpInfo($teamId)
    {
        $returnType = '\Swagger\Client\Model\TeamPublicRepresentation[]';
        $request = $this->getSubteamsRequest($teamId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TeamPublicRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubteamsAsync
     *
     * List Subteams
     *
     * @param  string $teamId The team id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubteamsAsync($teamId)
    {
        return $this->getSubteamsAsyncWithHttpInfo($teamId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubteamsAsyncWithHttpInfo
     *
     * List Subteams
     *
     * @param  string $teamId The team id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubteamsAsyncWithHttpInfo($teamId)
    {
        $returnType = '\Swagger\Client\Model\TeamPublicRepresentation[]';
        $request = $this->getSubteamsRequest($teamId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubteams'
     *
     * @param  string $teamId The team id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubteamsRequest($teamId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling getSubteams'
            );
        }

        $resourcePath = '/team/{teamId}/subteam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamPromptAggregateStats
     *
     * Get aggregate stats for campaigns
     *
     * @param  string $clientGroupId ID of the client group association (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTeamPromptAggregateStats($clientGroupId)
    {
        $this->getTeamPromptAggregateStatsWithHttpInfo($clientGroupId);
    }

    /**
     * Operation getTeamPromptAggregateStatsWithHttpInfo
     *
     * Get aggregate stats for campaigns
     *
     * @param  string $clientGroupId ID of the client group association (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamPromptAggregateStatsWithHttpInfo($clientGroupId)
    {
        $returnType = '';
        $request = $this->getTeamPromptAggregateStatsRequest($clientGroupId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamPromptAggregateStatsAsync
     *
     * Get aggregate stats for campaigns
     *
     * @param  string $clientGroupId ID of the client group association (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamPromptAggregateStatsAsync($clientGroupId)
    {
        return $this->getTeamPromptAggregateStatsAsyncWithHttpInfo($clientGroupId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamPromptAggregateStatsAsyncWithHttpInfo
     *
     * Get aggregate stats for campaigns
     *
     * @param  string $clientGroupId ID of the client group association (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamPromptAggregateStatsAsyncWithHttpInfo($clientGroupId)
    {
        $returnType = '';
        $request = $this->getTeamPromptAggregateStatsRequest($clientGroupId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamPromptAggregateStats'
     *
     * @param  string $clientGroupId ID of the client group association (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamPromptAggregateStatsRequest($clientGroupId)
    {
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientGroupId when calling getTeamPromptAggregateStats'
            );
        }

        $resourcePath = '/team/{clientGroupId}/campaign/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($clientGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'clientGroupId' . '}',
                ObjectSerializer::toPathValue($clientGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamPromptCampaigns
     *
     * Get campaigns for team
     *
     * @param  string $clientGroupId ID of the client group association (required)
     * @param  string $searchTerm The value to search for in prompt subject (optional)
     * @param  string $currentPage The current page (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTeamPromptCampaigns($clientGroupId, $searchTerm = null, $currentPage = null)
    {
        $this->getTeamPromptCampaignsWithHttpInfo($clientGroupId, $searchTerm, $currentPage);
    }

    /**
     * Operation getTeamPromptCampaignsWithHttpInfo
     *
     * Get campaigns for team
     *
     * @param  string $clientGroupId ID of the client group association (required)
     * @param  string $searchTerm The value to search for in prompt subject (optional)
     * @param  string $currentPage The current page (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamPromptCampaignsWithHttpInfo($clientGroupId, $searchTerm = null, $currentPage = null)
    {
        $returnType = '';
        $request = $this->getTeamPromptCampaignsRequest($clientGroupId, $searchTerm, $currentPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamPromptCampaignsAsync
     *
     * Get campaigns for team
     *
     * @param  string $clientGroupId ID of the client group association (required)
     * @param  string $searchTerm The value to search for in prompt subject (optional)
     * @param  string $currentPage The current page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamPromptCampaignsAsync($clientGroupId, $searchTerm = null, $currentPage = null)
    {
        return $this->getTeamPromptCampaignsAsyncWithHttpInfo($clientGroupId, $searchTerm, $currentPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamPromptCampaignsAsyncWithHttpInfo
     *
     * Get campaigns for team
     *
     * @param  string $clientGroupId ID of the client group association (required)
     * @param  string $searchTerm The value to search for in prompt subject (optional)
     * @param  string $currentPage The current page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamPromptCampaignsAsyncWithHttpInfo($clientGroupId, $searchTerm = null, $currentPage = null)
    {
        $returnType = '';
        $request = $this->getTeamPromptCampaignsRequest($clientGroupId, $searchTerm, $currentPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamPromptCampaigns'
     *
     * @param  string $clientGroupId ID of the client group association (required)
     * @param  string $searchTerm The value to search for in prompt subject (optional)
     * @param  string $currentPage The current page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamPromptCampaignsRequest($clientGroupId, $searchTerm = null, $currentPage = null)
    {
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientGroupId when calling getTeamPromptCampaigns'
            );
        }

        $resourcePath = '/team/{clientGroupId}/campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($searchTerm !== null) {
            $queryParams['searchTerm'] = ObjectSerializer::toQueryValue($searchTerm);
        }
        // query params
        if ($currentPage !== null) {
            $queryParams['currentPage'] = ObjectSerializer::toQueryValue($currentPage);
        }

        // path params
        if ($clientGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'clientGroupId' . '}',
                ObjectSerializer::toPathValue($clientGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inviteToSocialPromptTeam
     *
     * Invite a list to join the admin's social prompt team
     *
     * @param  string $teamId The team id (required)
     * @param  string $listId List to invite to the social prompt team. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function inviteToSocialPromptTeam($teamId, $listId)
    {
        $this->inviteToSocialPromptTeamWithHttpInfo($teamId, $listId);
    }

    /**
     * Operation inviteToSocialPromptTeamWithHttpInfo
     *
     * Invite a list to join the admin's social prompt team
     *
     * @param  string $teamId The team id (required)
     * @param  string $listId List to invite to the social prompt team. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function inviteToSocialPromptTeamWithHttpInfo($teamId, $listId)
    {
        $returnType = '';
        $request = $this->inviteToSocialPromptTeamRequest($teamId, $listId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation inviteToSocialPromptTeamAsync
     *
     * Invite a list to join the admin's social prompt team
     *
     * @param  string $teamId The team id (required)
     * @param  string $listId List to invite to the social prompt team. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inviteToSocialPromptTeamAsync($teamId, $listId)
    {
        return $this->inviteToSocialPromptTeamAsyncWithHttpInfo($teamId, $listId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inviteToSocialPromptTeamAsyncWithHttpInfo
     *
     * Invite a list to join the admin's social prompt team
     *
     * @param  string $teamId The team id (required)
     * @param  string $listId List to invite to the social prompt team. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inviteToSocialPromptTeamAsyncWithHttpInfo($teamId, $listId)
    {
        $returnType = '';
        $request = $this->inviteToSocialPromptTeamRequest($teamId, $listId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inviteToSocialPromptTeam'
     *
     * @param  string $teamId The team id (required)
     * @param  string $listId List to invite to the social prompt team. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inviteToSocialPromptTeamRequest($teamId, $listId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling inviteToSocialPromptTeam'
            );
        }
        // verify the required parameter 'listId' is set
        if ($listId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listId when calling inviteToSocialPromptTeam'
            );
        }

        $resourcePath = '/teams/prompt/invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($teamId !== null) {
            $formParams['teamId'] = ObjectSerializer::toFormValue($teamId);
        }
        // form params
        if ($listId !== null) {
            $formParams['listId'] = ObjectSerializer::toFormValue($listId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queueJerichoSend
     *
     * Creates a Jericho send.
     *
     * @param  \Swagger\Client\Model\JerichoConfiguration $config JSON representing a Jericho configuration (required)
     * @param  string $teamId The ID of the team. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\JerichoConfiguration
     */
    public function queueJerichoSend($config, $teamId)
    {
        list($response) = $this->queueJerichoSendWithHttpInfo($config, $teamId);
        return $response;
    }

    /**
     * Operation queueJerichoSendWithHttpInfo
     *
     * Creates a Jericho send.
     *
     * @param  \Swagger\Client\Model\JerichoConfiguration $config JSON representing a Jericho configuration (required)
     * @param  string $teamId The ID of the team. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\JerichoConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function queueJerichoSendWithHttpInfo($config, $teamId)
    {
        $returnType = '\Swagger\Client\Model\JerichoConfiguration';
        $request = $this->queueJerichoSendRequest($config, $teamId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\JerichoConfiguration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queueJerichoSendAsync
     *
     * Creates a Jericho send.
     *
     * @param  \Swagger\Client\Model\JerichoConfiguration $config JSON representing a Jericho configuration (required)
     * @param  string $teamId The ID of the team. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queueJerichoSendAsync($config, $teamId)
    {
        return $this->queueJerichoSendAsyncWithHttpInfo($config, $teamId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queueJerichoSendAsyncWithHttpInfo
     *
     * Creates a Jericho send.
     *
     * @param  \Swagger\Client\Model\JerichoConfiguration $config JSON representing a Jericho configuration (required)
     * @param  string $teamId The ID of the team. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queueJerichoSendAsyncWithHttpInfo($config, $teamId)
    {
        $returnType = '\Swagger\Client\Model\JerichoConfiguration';
        $request = $this->queueJerichoSendRequest($config, $teamId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queueJerichoSend'
     *
     * @param  \Swagger\Client\Model\JerichoConfiguration $config JSON representing a Jericho configuration (required)
     * @param  string $teamId The ID of the team. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queueJerichoSendRequest($config, $teamId)
    {
        // verify the required parameter 'config' is set
        if ($config === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config when calling queueJerichoSend'
            );
        }
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling queueJerichoSend'
            );
        }

        $resourcePath = '/team/{teamId}/jericho';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($config)) {
            $_tempBody = $config;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeMemberFromTeam
     *
     * Remove Member from Team
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being removed. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function removeMemberFromTeam($teamId, $userId)
    {
        list($response) = $this->removeMemberFromTeamWithHttpInfo($teamId, $userId);
        return $response;
    }

    /**
     * Operation removeMemberFromTeamWithHttpInfo
     *
     * Remove Member from Team
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being removed. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeMemberFromTeamWithHttpInfo($teamId, $userId)
    {
        $returnType = 'string';
        $request = $this->removeMemberFromTeamRequest($teamId, $userId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeMemberFromTeamAsync
     *
     * Remove Member from Team
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMemberFromTeamAsync($teamId, $userId)
    {
        return $this->removeMemberFromTeamAsyncWithHttpInfo($teamId, $userId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeMemberFromTeamAsyncWithHttpInfo
     *
     * Remove Member from Team
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMemberFromTeamAsyncWithHttpInfo($teamId, $userId)
    {
        $returnType = 'string';
        $request = $this->removeMemberFromTeamRequest($teamId, $userId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeMemberFromTeam'
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeMemberFromTeamRequest($teamId, $userId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling removeMemberFromTeam'
            );
        }
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling removeMemberFromTeam'
            );
        }

        $resourcePath = '/team/{teamId}/member/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resendTeamMemberInvitation
     *
     * Resend invite
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberUserId The user id of the member being resent an invitation. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TeamPublicRepresentation
     */
    public function resendTeamMemberInvitation($teamId, $memberUserId)
    {
        list($response) = $this->resendTeamMemberInvitationWithHttpInfo($teamId, $memberUserId);
        return $response;
    }

    /**
     * Operation resendTeamMemberInvitationWithHttpInfo
     *
     * Resend invite
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberUserId The user id of the member being resent an invitation. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TeamPublicRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function resendTeamMemberInvitationWithHttpInfo($teamId, $memberUserId)
    {
        $returnType = '\Swagger\Client\Model\TeamPublicRepresentation';
        $request = $this->resendTeamMemberInvitationRequest($teamId, $memberUserId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TeamPublicRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resendTeamMemberInvitationAsync
     *
     * Resend invite
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberUserId The user id of the member being resent an invitation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendTeamMemberInvitationAsync($teamId, $memberUserId)
    {
        return $this->resendTeamMemberInvitationAsyncWithHttpInfo($teamId, $memberUserId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resendTeamMemberInvitationAsyncWithHttpInfo
     *
     * Resend invite
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberUserId The user id of the member being resent an invitation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendTeamMemberInvitationAsyncWithHttpInfo($teamId, $memberUserId)
    {
        $returnType = '\Swagger\Client\Model\TeamPublicRepresentation';
        $request = $this->resendTeamMemberInvitationRequest($teamId, $memberUserId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resendTeamMemberInvitation'
     *
     * @param  string $teamId The team id (required)
     * @param  string $memberUserId The user id of the member being resent an invitation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function resendTeamMemberInvitationRequest($teamId, $memberUserId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling resendTeamMemberInvitation'
            );
        }
        // verify the required parameter 'memberUserId' is set
        if ($memberUserId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberUserId when calling resendTeamMemberInvitation'
            );
        }

        $resourcePath = '/team/{teamId}/{memberUserId}/rewelcome';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }
        // path params
        if ($memberUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberUserId' . '}',
                ObjectSerializer::toPathValue($memberUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJerichoPromptSend
     *
     * Updates the Jericho Prompt Settings
     *
     * @param  string $teamId The team id (required)
     * @param  string $jerichoId ID of the Jericho job (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateJerichoPromptSend($teamId, $jerichoId)
    {
        $this->updateJerichoPromptSendWithHttpInfo($teamId, $jerichoId);
    }

    /**
     * Operation updateJerichoPromptSendWithHttpInfo
     *
     * Updates the Jericho Prompt Settings
     *
     * @param  string $teamId The team id (required)
     * @param  string $jerichoId ID of the Jericho job (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJerichoPromptSendWithHttpInfo($teamId, $jerichoId)
    {
        $returnType = '';
        $request = $this->updateJerichoPromptSendRequest($teamId, $jerichoId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateJerichoPromptSendAsync
     *
     * Updates the Jericho Prompt Settings
     *
     * @param  string $teamId The team id (required)
     * @param  string $jerichoId ID of the Jericho job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJerichoPromptSendAsync($teamId, $jerichoId)
    {
        return $this->updateJerichoPromptSendAsyncWithHttpInfo($teamId, $jerichoId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateJerichoPromptSendAsyncWithHttpInfo
     *
     * Updates the Jericho Prompt Settings
     *
     * @param  string $teamId The team id (required)
     * @param  string $jerichoId ID of the Jericho job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJerichoPromptSendAsyncWithHttpInfo($teamId, $jerichoId)
    {
        $returnType = '';
        $request = $this->updateJerichoPromptSendRequest($teamId, $jerichoId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateJerichoPromptSend'
     *
     * @param  string $teamId The team id (required)
     * @param  string $jerichoId ID of the Jericho job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateJerichoPromptSendRequest($teamId, $jerichoId)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling updateJerichoPromptSend'
            );
        }
        // verify the required parameter 'jerichoId' is set
        if ($jerichoId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jerichoId when calling updateJerichoPromptSend'
            );
        }

        $resourcePath = '/team/{teamId}/jericho/{jerichoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }
        // path params
        if ($jerichoId !== null) {
            $resourcePath = str_replace(
                '{' . 'jerichoId' . '}',
                ObjectSerializer::toPathValue($jerichoId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTeam
     *
     * Update a team
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The name of the team (optional)
     * @param  string $state The status of the login permissions (optional)
     * @param  bool $subteamsCanAddMembers Updates subteam member adding setting on group (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TeamPublicRepresentation
     */
    public function updateTeam($teamId, $name = null, $state = null, $subteamsCanAddMembers = null)
    {
        list($response) = $this->updateTeamWithHttpInfo($teamId, $name, $state, $subteamsCanAddMembers);
        return $response;
    }

    /**
     * Operation updateTeamWithHttpInfo
     *
     * Update a team
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The name of the team (optional)
     * @param  string $state The status of the login permissions (optional)
     * @param  bool $subteamsCanAddMembers Updates subteam member adding setting on group (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TeamPublicRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeamWithHttpInfo($teamId, $name = null, $state = null, $subteamsCanAddMembers = null)
    {
        $returnType = '\Swagger\Client\Model\TeamPublicRepresentation';
        $request = $this->updateTeamRequest($teamId, $name, $state, $subteamsCanAddMembers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TeamPublicRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTeamAsync
     *
     * Update a team
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The name of the team (optional)
     * @param  string $state The status of the login permissions (optional)
     * @param  bool $subteamsCanAddMembers Updates subteam member adding setting on group (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTeamAsync($teamId, $name = null, $state = null, $subteamsCanAddMembers = null)
    {
        return $this->updateTeamAsyncWithHttpInfo($teamId, $name, $state, $subteamsCanAddMembers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTeamAsyncWithHttpInfo
     *
     * Update a team
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The name of the team (optional)
     * @param  string $state The status of the login permissions (optional)
     * @param  bool $subteamsCanAddMembers Updates subteam member adding setting on group (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTeamAsyncWithHttpInfo($teamId, $name = null, $state = null, $subteamsCanAddMembers = null)
    {
        $returnType = '\Swagger\Client\Model\TeamPublicRepresentation';
        $request = $this->updateTeamRequest($teamId, $name, $state, $subteamsCanAddMembers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTeam'
     *
     * @param  string $teamId The team id (required)
     * @param  string $name The name of the team (optional)
     * @param  string $state The status of the login permissions (optional)
     * @param  bool $subteamsCanAddMembers Updates subteam member adding setting on group (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTeamRequest($teamId, $name = null, $state = null, $subteamsCanAddMembers = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling updateTeam'
            );
        }

        $resourcePath = '/team/{teamId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = ObjectSerializer::toFormValue($state);
        }
        // form params
        if ($subteamsCanAddMembers !== null) {
            $formParams['subteamsCanAddMembers'] = ObjectSerializer::toFormValue($subteamsCanAddMembers);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTeamMember
     *
     * Update Member of Team
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being added to the team. (required)
     * @param  bool $admin Set if the user is an admin of this team. (required)
     * @param  string $permissionSuiteId Set if the user is an admin of this team. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTeamMember($teamId, $userId, $admin, $permissionSuiteId = null)
    {
        $this->updateTeamMemberWithHttpInfo($teamId, $userId, $admin, $permissionSuiteId);
    }

    /**
     * Operation updateTeamMemberWithHttpInfo
     *
     * Update Member of Team
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being added to the team. (required)
     * @param  bool $admin Set if the user is an admin of this team. (required)
     * @param  string $permissionSuiteId Set if the user is an admin of this team. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeamMemberWithHttpInfo($teamId, $userId, $admin, $permissionSuiteId = null)
    {
        $returnType = '';
        $request = $this->updateTeamMemberRequest($teamId, $userId, $admin, $permissionSuiteId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateTeamMemberAsync
     *
     * Update Member of Team
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being added to the team. (required)
     * @param  bool $admin Set if the user is an admin of this team. (required)
     * @param  string $permissionSuiteId Set if the user is an admin of this team. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTeamMemberAsync($teamId, $userId, $admin, $permissionSuiteId = null)
    {
        return $this->updateTeamMemberAsyncWithHttpInfo($teamId, $userId, $admin, $permissionSuiteId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTeamMemberAsyncWithHttpInfo
     *
     * Update Member of Team
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being added to the team. (required)
     * @param  bool $admin Set if the user is an admin of this team. (required)
     * @param  string $permissionSuiteId Set if the user is an admin of this team. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTeamMemberAsyncWithHttpInfo($teamId, $userId, $admin, $permissionSuiteId = null)
    {
        $returnType = '';
        $request = $this->updateTeamMemberRequest($teamId, $userId, $admin, $permissionSuiteId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTeamMember'
     *
     * @param  string $teamId The team id (required)
     * @param  string $userId The user id of the member being added to the team. (required)
     * @param  bool $admin Set if the user is an admin of this team. (required)
     * @param  string $permissionSuiteId Set if the user is an admin of this team. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTeamMemberRequest($teamId, $userId, $admin, $permissionSuiteId = null)
    {
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teamId when calling updateTeamMember'
            );
        }
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling updateTeamMember'
            );
        }
        // verify the required parameter 'admin' is set
        if ($admin === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $admin when calling updateTeamMember'
            );
        }

        $resourcePath = '/team/{teamId}/member';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                '{' . 'teamId' . '}',
                ObjectSerializer::toPathValue($teamId),
                $resourcePath
            );
        }

        // form params
        if ($userId !== null) {
            $formParams['userId'] = ObjectSerializer::toFormValue($userId);
        }
        // form params
        if ($admin !== null) {
            $formParams['admin'] = ObjectSerializer::toFormValue($admin);
        }
        // form params
        if ($permissionSuiteId !== null) {
            $formParams['permissionSuiteId'] = ObjectSerializer::toFormValue($permissionSuiteId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
