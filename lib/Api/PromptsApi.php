<?php
/**
 * PromptsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.24005
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * PromptsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromptsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bombbomb.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PromptsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPromptBot
     *
     * Create a running Prompt Bot for a list
     *
     * @param string $listId The list id to attach the bot to. (required)
     * @param string $emailId The default email to use. (required)
     * @param string $name The name of the bot. (required)
     * @param string $subject The subject of the default email. (required)
     * @param string $content The content used in the email. (required)
     * @param string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param string $botTypeId The type of bot to create. (required)
     * @param string $templateId The template used to create the email id. (required)
     * @param string $videoId The video used in the email. (optional)
     * @param string $endDate The time frame to complete sending to the list. (optional)
     * @return \Swagger\Client\Model\PromptBot
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPromptBot($listId, $emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $videoId = null, $endDate = null)
    {
        list($response) = $this->createPromptBotWithHttpInfo($listId, $emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $videoId, $endDate);
        return $response;
    }

    /**
     * Operation createPromptBotWithHttpInfo
     *
     * Create a running Prompt Bot for a list
     *
     * @param string $listId The list id to attach the bot to. (required)
     * @param string $emailId The default email to use. (required)
     * @param string $name The name of the bot. (required)
     * @param string $subject The subject of the default email. (required)
     * @param string $content The content used in the email. (required)
     * @param string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param string $botTypeId The type of bot to create. (required)
     * @param string $templateId The template used to create the email id. (required)
     * @param string $videoId The video used in the email. (optional)
     * @param string $endDate The time frame to complete sending to the list. (optional)
     * @return Array of \Swagger\Client\Model\PromptBot, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPromptBotWithHttpInfo($listId, $emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $videoId = null, $endDate = null)
    {
        // verify the required parameter 'listId' is set
        if ($listId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $listId when calling createPromptBot');
        }
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailId when calling createPromptBot');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createPromptBot');
        }
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subject when calling createPromptBot');
        }
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling createPromptBot');
        }
        // verify the required parameter 'contactFieldValueColumn' is set
        if ($contactFieldValueColumn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contactFieldValueColumn when calling createPromptBot');
        }
        // verify the required parameter 'botTypeId' is set
        if ($botTypeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $botTypeId when calling createPromptBot');
        }
        // verify the required parameter 'templateId' is set
        if ($templateId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateId when calling createPromptBot');
        }
        // parse inputs
        $resourcePath = "/prompts/bots";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($listId !== null) {
            $formParams['listId'] = $this->apiClient->getSerializer()->toFormValue($listId);
        }
        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = $this->apiClient->getSerializer()->toFormValue($emailId);
        }
        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = $this->apiClient->getSerializer()->toFormValue($videoId);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = $this->apiClient->getSerializer()->toFormValue($subject);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = $this->apiClient->getSerializer()->toFormValue($content);
        }
        // form params
        if ($contactFieldValueColumn !== null) {
            $formParams['contactFieldValueColumn'] = $this->apiClient->getSerializer()->toFormValue($contactFieldValueColumn);
        }
        // form params
        if ($endDate !== null) {
            $formParams['endDate'] = $this->apiClient->getSerializer()->toFormValue($endDate);
        }
        // form params
        if ($botTypeId !== null) {
            $formParams['botTypeId'] = $this->apiClient->getSerializer()->toFormValue($botTypeId);
        }
        // form params
        if ($templateId !== null) {
            $formParams['templateId'] = $this->apiClient->getSerializer()->toFormValue($templateId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PromptBot',
                '/prompts/bots'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PromptBot', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PromptBot', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createVideoEmailPrompt
     *
     * Prompts user to send a video
     *
     * @param \Swagger\Client\Model\VideoEmailPrompt $prompt The Video Email Prompt to be created (required)
     * @return \Swagger\Client\Model\VideoEmailPrompt
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createVideoEmailPrompt($prompt)
    {
        list($response) = $this->createVideoEmailPromptWithHttpInfo($prompt);
        return $response;
    }

    /**
     * Operation createVideoEmailPromptWithHttpInfo
     *
     * Prompts user to send a video
     *
     * @param \Swagger\Client\Model\VideoEmailPrompt $prompt The Video Email Prompt to be created (required)
     * @return Array of \Swagger\Client\Model\VideoEmailPrompt, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createVideoEmailPromptWithHttpInfo($prompt)
    {
        // verify the required parameter 'prompt' is set
        if ($prompt === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prompt when calling createVideoEmailPrompt');
        }
        // parse inputs
        $resourcePath = "/prompt";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($prompt)) {
            $_tempBody = $prompt;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VideoEmailPrompt',
                '/prompt'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VideoEmailPrompt', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VideoEmailPrompt', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPendingVideoEmailPrompts
     *
     * List pending prompts
     *
     * @return \Swagger\Client\Model\VideoEmailPrompt[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPendingVideoEmailPrompts()
    {
        list($response) = $this->getPendingVideoEmailPromptsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPendingVideoEmailPromptsWithHttpInfo
     *
     * List pending prompts
     *
     * @return Array of \Swagger\Client\Model\VideoEmailPrompt[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPendingVideoEmailPromptsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/prompt/pending";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VideoEmailPrompt[]',
                '/prompt/pending'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VideoEmailPrompt[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VideoEmailPrompt[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPromptBots
     *
     * List Prompt Bots
     *
     * @return \Swagger\Client\Model\PromptBot[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPromptBots()
    {
        list($response) = $this->getPromptBotsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPromptBotsWithHttpInfo
     *
     * List Prompt Bots
     *
     * @return Array of \Swagger\Client\Model\PromptBot[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPromptBotsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/prompts/bots";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PromptBot[]',
                '/prompts/bots'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PromptBot[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PromptBot[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPromptCampaigns
     *
     * List Prompt Campaigns
     *
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPromptCampaigns()
    {
        list($response) = $this->getPromptCampaignsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPromptCampaignsWithHttpInfo
     *
     * List Prompt Campaigns
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPromptCampaignsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/prompts/campaigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/prompts/campaigns'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getVideoEmailPrompt
     *
     * Gets a prompt
     *
     * @param string $id The Id of the prompt (required)
     * @return \Swagger\Client\Model\VideoEmailPrompt
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getVideoEmailPrompt($id)
    {
        list($response) = $this->getVideoEmailPromptWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getVideoEmailPromptWithHttpInfo
     *
     * Gets a prompt
     *
     * @param string $id The Id of the prompt (required)
     * @return Array of \Swagger\Client\Model\VideoEmailPrompt, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getVideoEmailPromptWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getVideoEmailPrompt');
        }
        // parse inputs
        $resourcePath = "/prompt/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VideoEmailPrompt',
                '/prompt/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VideoEmailPrompt', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VideoEmailPrompt', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVideoEmailPrompts
     *
     * List prompts
     *
     * @return \Swagger\Client\Model\VideoEmailPrompt[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getVideoEmailPrompts()
    {
        list($response) = $this->getVideoEmailPromptsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getVideoEmailPromptsWithHttpInfo
     *
     * List prompts
     *
     * @return Array of \Swagger\Client\Model\VideoEmailPrompt[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getVideoEmailPromptsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/prompt/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VideoEmailPrompt[]',
                '/prompt/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VideoEmailPrompt[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VideoEmailPrompt[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation respondToVideoEmailPrompt
     *
     * Respond to a prompt
     *
     * @param string $id The id of the prompt. (required)
     * @param string $choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param string $videoId The id of the video. (optional)
     * @param string $emailId The id of the email. (optional)
     * @param string $subject The subject of the email (optional)
     * @return \Swagger\Client\Model\VideoEmailPrompt
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondToVideoEmailPrompt($id, $choice, $videoId = null, $emailId = null, $subject = null)
    {
        list($response) = $this->respondToVideoEmailPromptWithHttpInfo($id, $choice, $videoId, $emailId, $subject);
        return $response;
    }

    /**
     * Operation respondToVideoEmailPromptWithHttpInfo
     *
     * Respond to a prompt
     *
     * @param string $id The id of the prompt. (required)
     * @param string $choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param string $videoId The id of the video. (optional)
     * @param string $emailId The id of the email. (optional)
     * @param string $subject The subject of the email (optional)
     * @return Array of \Swagger\Client\Model\VideoEmailPrompt, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondToVideoEmailPromptWithHttpInfo($id, $choice, $videoId = null, $emailId = null, $subject = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling respondToVideoEmailPrompt');
        }
        // verify the required parameter 'choice' is set
        if ($choice === null) {
            throw new \InvalidArgumentException('Missing the required parameter $choice when calling respondToVideoEmailPrompt');
        }
        // parse inputs
        $resourcePath = "/prompt/{id}/response";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = $this->apiClient->getSerializer()->toFormValue($videoId);
        }
        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = $this->apiClient->getSerializer()->toFormValue($emailId);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = $this->apiClient->getSerializer()->toFormValue($subject);
        }
        // form params
        if ($choice !== null) {
            $formParams['choice'] = $this->apiClient->getSerializer()->toFormValue($choice);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VideoEmailPrompt',
                '/prompt/{id}/response'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VideoEmailPrompt', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VideoEmailPrompt', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePromptBot
     *
     * Update Prompt Bot
     *
     * @param string $id The bot id. (required)
     * @param string $listId The list id to attach the bot to. (required)
     * @param string $emailId The default email to use. (required)
     * @param string $name The name of the bot. (required)
     * @param string $subject The subject of the default email. (required)
     * @param string $content The content used in the default email. (required)
     * @param string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param string $templateId The template used to create the email id. (required)
     * @param string $videoId The video used in the default email. (optional)
     * @param string $endDate The time frame to complete sending to the list. (optional)
     * @param string $status The status of the bot. (optional)
     * @return \Swagger\Client\Model\PromptBot
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updatePromptBot($id, $listId, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $videoId = null, $endDate = null, $status = null)
    {
        list($response) = $this->updatePromptBotWithHttpInfo($id, $listId, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $videoId, $endDate, $status);
        return $response;
    }

    /**
     * Operation updatePromptBotWithHttpInfo
     *
     * Update Prompt Bot
     *
     * @param string $id The bot id. (required)
     * @param string $listId The list id to attach the bot to. (required)
     * @param string $emailId The default email to use. (required)
     * @param string $name The name of the bot. (required)
     * @param string $subject The subject of the default email. (required)
     * @param string $content The content used in the default email. (required)
     * @param string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param string $templateId The template used to create the email id. (required)
     * @param string $videoId The video used in the default email. (optional)
     * @param string $endDate The time frame to complete sending to the list. (optional)
     * @param string $status The status of the bot. (optional)
     * @return Array of \Swagger\Client\Model\PromptBot, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updatePromptBotWithHttpInfo($id, $listId, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $videoId = null, $endDate = null, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updatePromptBot');
        }
        // verify the required parameter 'listId' is set
        if ($listId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $listId when calling updatePromptBot');
        }
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailId when calling updatePromptBot');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updatePromptBot');
        }
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subject when calling updatePromptBot');
        }
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling updatePromptBot');
        }
        // verify the required parameter 'contactFieldValueColumn' is set
        if ($contactFieldValueColumn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contactFieldValueColumn when calling updatePromptBot');
        }
        // verify the required parameter 'templateId' is set
        if ($templateId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateId when calling updatePromptBot');
        }
        // parse inputs
        $resourcePath = "/prompts/bots/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($listId !== null) {
            $formParams['listId'] = $this->apiClient->getSerializer()->toFormValue($listId);
        }
        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = $this->apiClient->getSerializer()->toFormValue($emailId);
        }
        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = $this->apiClient->getSerializer()->toFormValue($videoId);
        }
        // form params
        if ($endDate !== null) {
            $formParams['endDate'] = $this->apiClient->getSerializer()->toFormValue($endDate);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = $this->apiClient->getSerializer()->toFormValue($status);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = $this->apiClient->getSerializer()->toFormValue($subject);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = $this->apiClient->getSerializer()->toFormValue($content);
        }
        // form params
        if ($contactFieldValueColumn !== null) {
            $formParams['contactFieldValueColumn'] = $this->apiClient->getSerializer()->toFormValue($contactFieldValueColumn);
        }
        // form params
        if ($templateId !== null) {
            $formParams['templateId'] = $this->apiClient->getSerializer()->toFormValue($templateId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PromptBot',
                '/prompts/bots/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PromptBot', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PromptBot', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePromptCampaign
     *
     * Update Prompt Campaign
     *
     * @param string $clientGroupId The client group of the campaign. (required)
     * @param string $brandedTemplateId The template to use for branded feel emails. (optional)
     * @param string $personalTemplateId The template to use for personal feel emails. (optional)
     * @param bool $enabled Set whether the user is able to start receiving prompts. (optional)
     * @param string $autoShares These are what we are autosharing to (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updatePromptCampaign($clientGroupId, $brandedTemplateId = null, $personalTemplateId = null, $enabled = null, $autoShares = null)
    {
        list($response) = $this->updatePromptCampaignWithHttpInfo($clientGroupId, $brandedTemplateId, $personalTemplateId, $enabled, $autoShares);
        return $response;
    }

    /**
     * Operation updatePromptCampaignWithHttpInfo
     *
     * Update Prompt Campaign
     *
     * @param string $clientGroupId The client group of the campaign. (required)
     * @param string $brandedTemplateId The template to use for branded feel emails. (optional)
     * @param string $personalTemplateId The template to use for personal feel emails. (optional)
     * @param bool $enabled Set whether the user is able to start receiving prompts. (optional)
     * @param string $autoShares These are what we are autosharing to (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updatePromptCampaignWithHttpInfo($clientGroupId, $brandedTemplateId = null, $personalTemplateId = null, $enabled = null, $autoShares = null)
    {
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientGroupId when calling updatePromptCampaign');
        }
        // parse inputs
        $resourcePath = "/prompts/campaigns/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($clientGroupId !== null) {
            $formParams['clientGroupId'] = $this->apiClient->getSerializer()->toFormValue($clientGroupId);
        }
        // form params
        if ($brandedTemplateId !== null) {
            $formParams['brandedTemplateId'] = $this->apiClient->getSerializer()->toFormValue($brandedTemplateId);
        }
        // form params
        if ($personalTemplateId !== null) {
            $formParams['personalTemplateId'] = $this->apiClient->getSerializer()->toFormValue($personalTemplateId);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = $this->apiClient->getSerializer()->toFormValue($enabled);
        }
        // form params
        if ($autoShares !== null) {
            $formParams['autoShares'] = $this->apiClient->getSerializer()->toFormValue($autoShares);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/prompts/campaigns/{id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
