<?php
/**
 * PromptsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PromptsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromptsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPromptBot
     *
     * Create a running Prompt Bot for a list
     *
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $botTypeId The type of bot to create. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PromptBot
     */
    public function createPromptBot($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId = null, $videoId = null, $endDate = null)
    {
        list($response) = $this->createPromptBotWithHttpInfo($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId, $videoId, $endDate);
        return $response;
    }

    /**
     * Operation createPromptBotWithHttpInfo
     *
     * Create a running Prompt Bot for a list
     *
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $botTypeId The type of bot to create. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PromptBot, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPromptBotWithHttpInfo($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId = null, $videoId = null, $endDate = null)
    {
        $returnType = '\Swagger\Client\Model\PromptBot';
        $request = $this->createPromptBotRequest($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId, $videoId, $endDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PromptBot',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPromptBotAsync
     *
     * Create a running Prompt Bot for a list
     *
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $botTypeId The type of bot to create. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPromptBotAsync($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId = null, $videoId = null, $endDate = null)
    {
        return $this->createPromptBotAsyncWithHttpInfo($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId, $videoId, $endDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPromptBotAsyncWithHttpInfo
     *
     * Create a running Prompt Bot for a list
     *
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $botTypeId The type of bot to create. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPromptBotAsyncWithHttpInfo($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId = null, $videoId = null, $endDate = null)
    {
        $returnType = '\Swagger\Client\Model\PromptBot';
        $request = $this->createPromptBotRequest($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId, $videoId, $endDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPromptBot'
     *
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $botTypeId The type of bot to create. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPromptBotRequest($emailId, $name, $subject, $content, $contactFieldValueColumn, $botTypeId, $templateId, $listId = null, $videoId = null, $endDate = null)
    {
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailId when calling createPromptBot'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling createPromptBot'
            );
        }
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling createPromptBot'
            );
        }
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling createPromptBot'
            );
        }
        // verify the required parameter 'contactFieldValueColumn' is set
        if ($contactFieldValueColumn === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactFieldValueColumn when calling createPromptBot'
            );
        }
        // verify the required parameter 'botTypeId' is set
        if ($botTypeId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $botTypeId when calling createPromptBot'
            );
        }
        // verify the required parameter 'templateId' is set
        if ($templateId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateId when calling createPromptBot'
            );
        }

        $resourcePath = '/prompts/bots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($listId !== null) {
            $formParams['listId'] = ObjectSerializer::toFormValue($listId);
        }
        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = ObjectSerializer::toFormValue($emailId);
        }
        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = ObjectSerializer::toFormValue($videoId);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = ObjectSerializer::toFormValue($content);
        }
        // form params
        if ($contactFieldValueColumn !== null) {
            $formParams['contactFieldValueColumn'] = ObjectSerializer::toFormValue($contactFieldValueColumn);
        }
        // form params
        if ($endDate !== null) {
            $formParams['endDate'] = ObjectSerializer::toFormValue($endDate);
        }
        // form params
        if ($botTypeId !== null) {
            $formParams['botTypeId'] = ObjectSerializer::toFormValue($botTypeId);
        }
        // form params
        if ($templateId !== null) {
            $formParams['templateId'] = ObjectSerializer::toFormValue($templateId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createVideoEmailPrompt
     *
     * Prompts user to send a video
     *
     * @param  \Swagger\Client\Model\VideoEmailPrompt $prompt The Video Email Prompt to be created (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VideoEmailPrompt
     */
    public function createVideoEmailPrompt($prompt)
    {
        list($response) = $this->createVideoEmailPromptWithHttpInfo($prompt);
        return $response;
    }

    /**
     * Operation createVideoEmailPromptWithHttpInfo
     *
     * Prompts user to send a video
     *
     * @param  \Swagger\Client\Model\VideoEmailPrompt $prompt The Video Email Prompt to be created (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VideoEmailPrompt, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVideoEmailPromptWithHttpInfo($prompt)
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt';
        $request = $this->createVideoEmailPromptRequest($prompt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VideoEmailPrompt',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createVideoEmailPromptAsync
     *
     * Prompts user to send a video
     *
     * @param  \Swagger\Client\Model\VideoEmailPrompt $prompt The Video Email Prompt to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVideoEmailPromptAsync($prompt)
    {
        return $this->createVideoEmailPromptAsyncWithHttpInfo($prompt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVideoEmailPromptAsyncWithHttpInfo
     *
     * Prompts user to send a video
     *
     * @param  \Swagger\Client\Model\VideoEmailPrompt $prompt The Video Email Prompt to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVideoEmailPromptAsyncWithHttpInfo($prompt)
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt';
        $request = $this->createVideoEmailPromptRequest($prompt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVideoEmailPrompt'
     *
     * @param  \Swagger\Client\Model\VideoEmailPrompt $prompt The Video Email Prompt to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createVideoEmailPromptRequest($prompt)
    {
        // verify the required parameter 'prompt' is set
        if ($prompt === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prompt when calling createVideoEmailPrompt'
            );
        }

        $resourcePath = '/prompt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($prompt)) {
            $_tempBody = $prompt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAlternateCampaignContent
     *
     * List alternate campaign content
     *
     * @param  string $clientGroupId Id for the campaign (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAlternateCampaignContent($clientGroupId)
    {
        $this->getAlternateCampaignContentWithHttpInfo($clientGroupId);
    }

    /**
     * Operation getAlternateCampaignContentWithHttpInfo
     *
     * List alternate campaign content
     *
     * @param  string $clientGroupId Id for the campaign (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAlternateCampaignContentWithHttpInfo($clientGroupId)
    {
        $returnType = '';
        $request = $this->getAlternateCampaignContentRequest($clientGroupId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAlternateCampaignContentAsync
     *
     * List alternate campaign content
     *
     * @param  string $clientGroupId Id for the campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAlternateCampaignContentAsync($clientGroupId)
    {
        return $this->getAlternateCampaignContentAsyncWithHttpInfo($clientGroupId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAlternateCampaignContentAsyncWithHttpInfo
     *
     * List alternate campaign content
     *
     * @param  string $clientGroupId Id for the campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAlternateCampaignContentAsyncWithHttpInfo($clientGroupId)
    {
        $returnType = '';
        $request = $this->getAlternateCampaignContentRequest($clientGroupId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAlternateCampaignContent'
     *
     * @param  string $clientGroupId Id for the campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAlternateCampaignContentRequest($clientGroupId)
    {
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientGroupId when calling getAlternateCampaignContent'
            );
        }

        $resourcePath = '/campaign/{campaignId}/content/alternate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($clientGroupId !== null) {
            $queryParams['clientGroupId'] = ObjectSerializer::toQueryValue($clientGroupId);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPendingVideoEmailPrompts
     *
     * List pending prompts
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VideoEmailPrompt[]
     */
    public function getPendingVideoEmailPrompts()
    {
        list($response) = $this->getPendingVideoEmailPromptsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPendingVideoEmailPromptsWithHttpInfo
     *
     * List pending prompts
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VideoEmailPrompt[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPendingVideoEmailPromptsWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt[]';
        $request = $this->getPendingVideoEmailPromptsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VideoEmailPrompt[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPendingVideoEmailPromptsAsync
     *
     * List pending prompts
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPendingVideoEmailPromptsAsync()
    {
        return $this->getPendingVideoEmailPromptsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPendingVideoEmailPromptsAsyncWithHttpInfo
     *
     * List pending prompts
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPendingVideoEmailPromptsAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt[]';
        $request = $this->getPendingVideoEmailPromptsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPendingVideoEmailPrompts'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPendingVideoEmailPromptsRequest()
    {

        $resourcePath = '/prompt/pending';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPromptBots
     *
     * List Prompt Bots
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PromptBot[]
     */
    public function getPromptBots()
    {
        list($response) = $this->getPromptBotsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPromptBotsWithHttpInfo
     *
     * List Prompt Bots
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PromptBot[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPromptBotsWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PromptBot[]';
        $request = $this->getPromptBotsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PromptBot[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPromptBotsAsync
     *
     * List Prompt Bots
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromptBotsAsync()
    {
        return $this->getPromptBotsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPromptBotsAsyncWithHttpInfo
     *
     * List Prompt Bots
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromptBotsAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PromptBot[]';
        $request = $this->getPromptBotsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPromptBots'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPromptBotsRequest()
    {

        $resourcePath = '/prompts/bots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPromptCampaigns
     *
     * List Prompt Campaigns
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getPromptCampaigns()
    {
        $this->getPromptCampaignsWithHttpInfo();
    }

    /**
     * Operation getPromptCampaignsWithHttpInfo
     *
     * List Prompt Campaigns
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPromptCampaignsWithHttpInfo()
    {
        $returnType = '';
        $request = $this->getPromptCampaignsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getPromptCampaignsAsync
     *
     * List Prompt Campaigns
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromptCampaignsAsync()
    {
        return $this->getPromptCampaignsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPromptCampaignsAsyncWithHttpInfo
     *
     * List Prompt Campaigns
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromptCampaignsAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->getPromptCampaignsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPromptCampaigns'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPromptCampaignsRequest()
    {

        $resourcePath = '/prompts/{userId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVideoEmailPrompt
     *
     * Gets a prompt
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VideoEmailPrompt
     */
    public function getVideoEmailPrompt($id)
    {
        list($response) = $this->getVideoEmailPromptWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getVideoEmailPromptWithHttpInfo
     *
     * Gets a prompt
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VideoEmailPrompt, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVideoEmailPromptWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt';
        $request = $this->getVideoEmailPromptRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VideoEmailPrompt',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVideoEmailPromptAsync
     *
     * Gets a prompt
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideoEmailPromptAsync($id)
    {
        return $this->getVideoEmailPromptAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVideoEmailPromptAsyncWithHttpInfo
     *
     * Gets a prompt
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideoEmailPromptAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt';
        $request = $this->getVideoEmailPromptRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVideoEmailPrompt'
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVideoEmailPromptRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getVideoEmailPrompt'
            );
        }

        $resourcePath = '/prompt/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVideoEmailPrompts
     *
     * List prompts
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VideoEmailPrompt[]
     */
    public function getVideoEmailPrompts()
    {
        list($response) = $this->getVideoEmailPromptsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getVideoEmailPromptsWithHttpInfo
     *
     * List prompts
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VideoEmailPrompt[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVideoEmailPromptsWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt[]';
        $request = $this->getVideoEmailPromptsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VideoEmailPrompt[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVideoEmailPromptsAsync
     *
     * List prompts
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideoEmailPromptsAsync()
    {
        return $this->getVideoEmailPromptsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVideoEmailPromptsAsyncWithHttpInfo
     *
     * List prompts
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideoEmailPromptsAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt[]';
        $request = $this->getVideoEmailPromptsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVideoEmailPrompts'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVideoEmailPromptsRequest()
    {

        $resourcePath = '/prompt/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation respondToVideoEmailPrompt
     *
     * Respond to a prompt
     *
     * @param  string $id The id of the prompt. (required)
     * @param  string $choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VideoEmailPrompt
     */
    public function respondToVideoEmailPrompt($id, $choice, $videoId = null, $emailId = null, $subject = null)
    {
        list($response) = $this->respondToVideoEmailPromptWithHttpInfo($id, $choice, $videoId, $emailId, $subject);
        return $response;
    }

    /**
     * Operation respondToVideoEmailPromptWithHttpInfo
     *
     * Respond to a prompt
     *
     * @param  string $id The id of the prompt. (required)
     * @param  string $choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VideoEmailPrompt, HTTP status code, HTTP response headers (array of strings)
     */
    public function respondToVideoEmailPromptWithHttpInfo($id, $choice, $videoId = null, $emailId = null, $subject = null)
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt';
        $request = $this->respondToVideoEmailPromptRequest($id, $choice, $videoId, $emailId, $subject);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VideoEmailPrompt',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation respondToVideoEmailPromptAsync
     *
     * Respond to a prompt
     *
     * @param  string $id The id of the prompt. (required)
     * @param  string $choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function respondToVideoEmailPromptAsync($id, $choice, $videoId = null, $emailId = null, $subject = null)
    {
        return $this->respondToVideoEmailPromptAsyncWithHttpInfo($id, $choice, $videoId, $emailId, $subject)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation respondToVideoEmailPromptAsyncWithHttpInfo
     *
     * Respond to a prompt
     *
     * @param  string $id The id of the prompt. (required)
     * @param  string $choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function respondToVideoEmailPromptAsyncWithHttpInfo($id, $choice, $videoId = null, $emailId = null, $subject = null)
    {
        $returnType = '\Swagger\Client\Model\VideoEmailPrompt';
        $request = $this->respondToVideoEmailPromptRequest($id, $choice, $videoId, $emailId, $subject);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'respondToVideoEmailPrompt'
     *
     * @param  string $id The id of the prompt. (required)
     * @param  string $choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function respondToVideoEmailPromptRequest($id, $choice, $videoId = null, $emailId = null, $subject = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling respondToVideoEmailPrompt'
            );
        }
        // verify the required parameter 'choice' is set
        if ($choice === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice when calling respondToVideoEmailPrompt'
            );
        }

        $resourcePath = '/prompt/{id}/response';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = ObjectSerializer::toFormValue($videoId);
        }
        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = ObjectSerializer::toFormValue($emailId);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($choice !== null) {
            $formParams['choice'] = ObjectSerializer::toFormValue($choice);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPromptImmediately
     *
     * 
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendPromptImmediately($id)
    {
        $this->sendPromptImmediatelyWithHttpInfo($id);
    }

    /**
     * Operation sendPromptImmediatelyWithHttpInfo
     *
     * 
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPromptImmediatelyWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->sendPromptImmediatelyRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendPromptImmediatelyAsync
     *
     * 
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPromptImmediatelyAsync($id)
    {
        return $this->sendPromptImmediatelyAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPromptImmediatelyAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPromptImmediatelyAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->sendPromptImmediatelyRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPromptImmediately'
     *
     * @param  string $id The Id of the prompt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendPromptImmediatelyRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling sendPromptImmediately'
            );
        }

        $resourcePath = '/prompt/{id}/sendit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncPromptSubscriptions
     *
     * Syncs Campaigns and One to Ones Subscriptions for User
     *
     * @param  bool $migrate After syncing, migrate away from old campaigns. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function syncPromptSubscriptions($migrate = null)
    {
        $this->syncPromptSubscriptionsWithHttpInfo($migrate);
    }

    /**
     * Operation syncPromptSubscriptionsWithHttpInfo
     *
     * Syncs Campaigns and One to Ones Subscriptions for User
     *
     * @param  bool $migrate After syncing, migrate away from old campaigns. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncPromptSubscriptionsWithHttpInfo($migrate = null)
    {
        $returnType = '';
        $request = $this->syncPromptSubscriptionsRequest($migrate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation syncPromptSubscriptionsAsync
     *
     * Syncs Campaigns and One to Ones Subscriptions for User
     *
     * @param  bool $migrate After syncing, migrate away from old campaigns. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncPromptSubscriptionsAsync($migrate = null)
    {
        return $this->syncPromptSubscriptionsAsyncWithHttpInfo($migrate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncPromptSubscriptionsAsyncWithHttpInfo
     *
     * Syncs Campaigns and One to Ones Subscriptions for User
     *
     * @param  bool $migrate After syncing, migrate away from old campaigns. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncPromptSubscriptionsAsyncWithHttpInfo($migrate = null)
    {
        $returnType = '';
        $request = $this->syncPromptSubscriptionsRequest($migrate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncPromptSubscriptions'
     *
     * @param  bool $migrate After syncing, migrate away from old campaigns. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function syncPromptSubscriptionsRequest($migrate = null)
    {

        $resourcePath = '/prompts/campaigns/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($migrate !== null) {
            $formParams['migrate'] = ObjectSerializer::toFormValue($migrate);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePrompt
     *
     * Update Prompt
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $sendMechanism The mechanism for the prompt to be sent (optional)
     * @param  string $facebookMessage The facebook message assigned to the prompt (optional)
     * @param  string $twitterMessage The twitter message assigned to the prompt (optional)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     * @param  string $resetCache The subject of the email (optional)
     * @param  string $resetEmailContent The subject of the email (optional)
     * @param  string $status The status of the prompt (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePrompt($id, $sendMechanism = null, $facebookMessage = null, $twitterMessage = null, $videoId = null, $emailId = null, $subject = null, $resetCache = null, $resetEmailContent = null, $status = null)
    {
        $this->updatePromptWithHttpInfo($id, $sendMechanism, $facebookMessage, $twitterMessage, $videoId, $emailId, $subject, $resetCache, $resetEmailContent, $status);
    }

    /**
     * Operation updatePromptWithHttpInfo
     *
     * Update Prompt
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $sendMechanism The mechanism for the prompt to be sent (optional)
     * @param  string $facebookMessage The facebook message assigned to the prompt (optional)
     * @param  string $twitterMessage The twitter message assigned to the prompt (optional)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     * @param  string $resetCache The subject of the email (optional)
     * @param  string $resetEmailContent The subject of the email (optional)
     * @param  string $status The status of the prompt (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePromptWithHttpInfo($id, $sendMechanism = null, $facebookMessage = null, $twitterMessage = null, $videoId = null, $emailId = null, $subject = null, $resetCache = null, $resetEmailContent = null, $status = null)
    {
        $returnType = '';
        $request = $this->updatePromptRequest($id, $sendMechanism, $facebookMessage, $twitterMessage, $videoId, $emailId, $subject, $resetCache, $resetEmailContent, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePromptAsync
     *
     * Update Prompt
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $sendMechanism The mechanism for the prompt to be sent (optional)
     * @param  string $facebookMessage The facebook message assigned to the prompt (optional)
     * @param  string $twitterMessage The twitter message assigned to the prompt (optional)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     * @param  string $resetCache The subject of the email (optional)
     * @param  string $resetEmailContent The subject of the email (optional)
     * @param  string $status The status of the prompt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromptAsync($id, $sendMechanism = null, $facebookMessage = null, $twitterMessage = null, $videoId = null, $emailId = null, $subject = null, $resetCache = null, $resetEmailContent = null, $status = null)
    {
        return $this->updatePromptAsyncWithHttpInfo($id, $sendMechanism, $facebookMessage, $twitterMessage, $videoId, $emailId, $subject, $resetCache, $resetEmailContent, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePromptAsyncWithHttpInfo
     *
     * Update Prompt
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $sendMechanism The mechanism for the prompt to be sent (optional)
     * @param  string $facebookMessage The facebook message assigned to the prompt (optional)
     * @param  string $twitterMessage The twitter message assigned to the prompt (optional)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     * @param  string $resetCache The subject of the email (optional)
     * @param  string $resetEmailContent The subject of the email (optional)
     * @param  string $status The status of the prompt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromptAsyncWithHttpInfo($id, $sendMechanism = null, $facebookMessage = null, $twitterMessage = null, $videoId = null, $emailId = null, $subject = null, $resetCache = null, $resetEmailContent = null, $status = null)
    {
        $returnType = '';
        $request = $this->updatePromptRequest($id, $sendMechanism, $facebookMessage, $twitterMessage, $videoId, $emailId, $subject, $resetCache, $resetEmailContent, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePrompt'
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $sendMechanism The mechanism for the prompt to be sent (optional)
     * @param  string $facebookMessage The facebook message assigned to the prompt (optional)
     * @param  string $twitterMessage The twitter message assigned to the prompt (optional)
     * @param  string $videoId The id of the video. (optional)
     * @param  string $emailId The id of the email. (optional)
     * @param  string $subject The subject of the email (optional)
     * @param  string $resetCache The subject of the email (optional)
     * @param  string $resetEmailContent The subject of the email (optional)
     * @param  string $status The status of the prompt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePromptRequest($id, $sendMechanism = null, $facebookMessage = null, $twitterMessage = null, $videoId = null, $emailId = null, $subject = null, $resetCache = null, $resetEmailContent = null, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePrompt'
            );
        }

        $resourcePath = '/prompts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($sendMechanism !== null) {
            $formParams['sendMechanism'] = ObjectSerializer::toFormValue($sendMechanism);
        }
        // form params
        if ($facebookMessage !== null) {
            $formParams['facebookMessage'] = ObjectSerializer::toFormValue($facebookMessage);
        }
        // form params
        if ($twitterMessage !== null) {
            $formParams['twitterMessage'] = ObjectSerializer::toFormValue($twitterMessage);
        }
        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = ObjectSerializer::toFormValue($videoId);
        }
        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = ObjectSerializer::toFormValue($emailId);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($resetCache !== null) {
            $formParams['resetCache'] = ObjectSerializer::toFormValue($resetCache);
        }
        // form params
        if ($resetEmailContent !== null) {
            $formParams['resetEmailContent'] = ObjectSerializer::toFormValue($resetEmailContent);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePromptBot
     *
     * Update Prompt Bot
     *
     * @param  string $id The bot id. (required)
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the default email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the default email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     * @param  string $status The status of the bot. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PromptBot
     */
    public function updatePromptBot($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId = null, $videoId = null, $endDate = null, $status = null)
    {
        list($response) = $this->updatePromptBotWithHttpInfo($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId, $videoId, $endDate, $status);
        return $response;
    }

    /**
     * Operation updatePromptBotWithHttpInfo
     *
     * Update Prompt Bot
     *
     * @param  string $id The bot id. (required)
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the default email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the default email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     * @param  string $status The status of the bot. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PromptBot, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePromptBotWithHttpInfo($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId = null, $videoId = null, $endDate = null, $status = null)
    {
        $returnType = '\Swagger\Client\Model\PromptBot';
        $request = $this->updatePromptBotRequest($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId, $videoId, $endDate, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PromptBot',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePromptBotAsync
     *
     * Update Prompt Bot
     *
     * @param  string $id The bot id. (required)
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the default email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the default email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     * @param  string $status The status of the bot. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromptBotAsync($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId = null, $videoId = null, $endDate = null, $status = null)
    {
        return $this->updatePromptBotAsyncWithHttpInfo($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId, $videoId, $endDate, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePromptBotAsyncWithHttpInfo
     *
     * Update Prompt Bot
     *
     * @param  string $id The bot id. (required)
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the default email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the default email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     * @param  string $status The status of the bot. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromptBotAsyncWithHttpInfo($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId = null, $videoId = null, $endDate = null, $status = null)
    {
        $returnType = '\Swagger\Client\Model\PromptBot';
        $request = $this->updatePromptBotRequest($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId, $videoId, $endDate, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePromptBot'
     *
     * @param  string $id The bot id. (required)
     * @param  string $emailId The default email to use. (required)
     * @param  string $name The name of the bot. (required)
     * @param  string $subject The subject of the default email. (required)
     * @param  string $content The content used in the default email. (required)
     * @param  string $contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param  string $templateId The template used to create the email id. (required)
     * @param  string $listId The list id to attach the bot to. (optional)
     * @param  string $videoId The video used in the default email. (optional)
     * @param  string $endDate The time frame to complete sending to the list. (optional)
     * @param  string $status The status of the bot. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePromptBotRequest($id, $emailId, $name, $subject, $content, $contactFieldValueColumn, $templateId, $listId = null, $videoId = null, $endDate = null, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePromptBot'
            );
        }
        // verify the required parameter 'emailId' is set
        if ($emailId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailId when calling updatePromptBot'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling updatePromptBot'
            );
        }
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling updatePromptBot'
            );
        }
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling updatePromptBot'
            );
        }
        // verify the required parameter 'contactFieldValueColumn' is set
        if ($contactFieldValueColumn === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactFieldValueColumn when calling updatePromptBot'
            );
        }
        // verify the required parameter 'templateId' is set
        if ($templateId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateId when calling updatePromptBot'
            );
        }

        $resourcePath = '/prompts/bots/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($listId !== null) {
            $formParams['listId'] = ObjectSerializer::toFormValue($listId);
        }
        // form params
        if ($emailId !== null) {
            $formParams['emailId'] = ObjectSerializer::toFormValue($emailId);
        }
        // form params
        if ($videoId !== null) {
            $formParams['videoId'] = ObjectSerializer::toFormValue($videoId);
        }
        // form params
        if ($endDate !== null) {
            $formParams['endDate'] = ObjectSerializer::toFormValue($endDate);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = ObjectSerializer::toFormValue($content);
        }
        // form params
        if ($contactFieldValueColumn !== null) {
            $formParams['contactFieldValueColumn'] = ObjectSerializer::toFormValue($contactFieldValueColumn);
        }
        // form params
        if ($templateId !== null) {
            $formParams['templateId'] = ObjectSerializer::toFormValue($templateId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePromptCampaign
     *
     * Update Prompt Campaign
     *
     * @param  string $clientGroupId The client group of the campaign. (required)
     * @param  string $brandedTemplateId The template to use for branded feel emails. (optional)
     * @param  string $personalTemplateId The template to use for personal feel emails. (optional)
     * @param  bool $enabled Set whether the user is able to start receiving prompts. (optional)
     * @param  string $sendMechanism The way to send the prompt (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePromptCampaign($clientGroupId, $brandedTemplateId = null, $personalTemplateId = null, $enabled = null, $sendMechanism = null)
    {
        $this->updatePromptCampaignWithHttpInfo($clientGroupId, $brandedTemplateId, $personalTemplateId, $enabled, $sendMechanism);
    }

    /**
     * Operation updatePromptCampaignWithHttpInfo
     *
     * Update Prompt Campaign
     *
     * @param  string $clientGroupId The client group of the campaign. (required)
     * @param  string $brandedTemplateId The template to use for branded feel emails. (optional)
     * @param  string $personalTemplateId The template to use for personal feel emails. (optional)
     * @param  bool $enabled Set whether the user is able to start receiving prompts. (optional)
     * @param  string $sendMechanism The way to send the prompt (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePromptCampaignWithHttpInfo($clientGroupId, $brandedTemplateId = null, $personalTemplateId = null, $enabled = null, $sendMechanism = null)
    {
        $returnType = '';
        $request = $this->updatePromptCampaignRequest($clientGroupId, $brandedTemplateId, $personalTemplateId, $enabled, $sendMechanism);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePromptCampaignAsync
     *
     * Update Prompt Campaign
     *
     * @param  string $clientGroupId The client group of the campaign. (required)
     * @param  string $brandedTemplateId The template to use for branded feel emails. (optional)
     * @param  string $personalTemplateId The template to use for personal feel emails. (optional)
     * @param  bool $enabled Set whether the user is able to start receiving prompts. (optional)
     * @param  string $sendMechanism The way to send the prompt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromptCampaignAsync($clientGroupId, $brandedTemplateId = null, $personalTemplateId = null, $enabled = null, $sendMechanism = null)
    {
        return $this->updatePromptCampaignAsyncWithHttpInfo($clientGroupId, $brandedTemplateId, $personalTemplateId, $enabled, $sendMechanism)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePromptCampaignAsyncWithHttpInfo
     *
     * Update Prompt Campaign
     *
     * @param  string $clientGroupId The client group of the campaign. (required)
     * @param  string $brandedTemplateId The template to use for branded feel emails. (optional)
     * @param  string $personalTemplateId The template to use for personal feel emails. (optional)
     * @param  bool $enabled Set whether the user is able to start receiving prompts. (optional)
     * @param  string $sendMechanism The way to send the prompt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromptCampaignAsyncWithHttpInfo($clientGroupId, $brandedTemplateId = null, $personalTemplateId = null, $enabled = null, $sendMechanism = null)
    {
        $returnType = '';
        $request = $this->updatePromptCampaignRequest($clientGroupId, $brandedTemplateId, $personalTemplateId, $enabled, $sendMechanism);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePromptCampaign'
     *
     * @param  string $clientGroupId The client group of the campaign. (required)
     * @param  string $brandedTemplateId The template to use for branded feel emails. (optional)
     * @param  string $personalTemplateId The template to use for personal feel emails. (optional)
     * @param  bool $enabled Set whether the user is able to start receiving prompts. (optional)
     * @param  string $sendMechanism The way to send the prompt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePromptCampaignRequest($clientGroupId, $brandedTemplateId = null, $personalTemplateId = null, $enabled = null, $sendMechanism = null)
    {
        // verify the required parameter 'clientGroupId' is set
        if ($clientGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientGroupId when calling updatePromptCampaign'
            );
        }

        $resourcePath = '/prompts/campaigns/{clientGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($clientGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'clientGroupId' . '}',
                ObjectSerializer::toPathValue($clientGroupId),
                $resourcePath
            );
        }

        // form params
        if ($brandedTemplateId !== null) {
            $formParams['brandedTemplateId'] = ObjectSerializer::toFormValue($brandedTemplateId);
        }
        // form params
        if ($personalTemplateId !== null) {
            $formParams['personalTemplateId'] = ObjectSerializer::toFormValue($personalTemplateId);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = ObjectSerializer::toFormValue($enabled);
        }
        // form params
        if ($sendMechanism !== null) {
            $formParams['sendMechanism'] = ObjectSerializer::toFormValue($sendMechanism);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePromptTemplate
     *
     * Update Prompt Content
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $alternateContentId The alternate content id (required)
     * @param  string $newEmailId The prompt&#39;s new email id (required)
     * @param  string $ogEmailId The prompt&#39;s original email id (required)
     * @param  string $newExampleVideoId The prompt&#39;s new tutorial video id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePromptTemplate($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId)
    {
        $this->updatePromptTemplateWithHttpInfo($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId);
    }

    /**
     * Operation updatePromptTemplateWithHttpInfo
     *
     * Update Prompt Content
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $alternateContentId The alternate content id (required)
     * @param  string $newEmailId The prompt&#39;s new email id (required)
     * @param  string $ogEmailId The prompt&#39;s original email id (required)
     * @param  string $newExampleVideoId The prompt&#39;s new tutorial video id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePromptTemplateWithHttpInfo($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId)
    {
        $returnType = '';
        $request = $this->updatePromptTemplateRequest($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePromptTemplateAsync
     *
     * Update Prompt Content
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $alternateContentId The alternate content id (required)
     * @param  string $newEmailId The prompt&#39;s new email id (required)
     * @param  string $ogEmailId The prompt&#39;s original email id (required)
     * @param  string $newExampleVideoId The prompt&#39;s new tutorial video id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromptTemplateAsync($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId)
    {
        return $this->updatePromptTemplateAsyncWithHttpInfo($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePromptTemplateAsyncWithHttpInfo
     *
     * Update Prompt Content
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $alternateContentId The alternate content id (required)
     * @param  string $newEmailId The prompt&#39;s new email id (required)
     * @param  string $ogEmailId The prompt&#39;s original email id (required)
     * @param  string $newExampleVideoId The prompt&#39;s new tutorial video id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromptTemplateAsyncWithHttpInfo($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId)
    {
        $returnType = '';
        $request = $this->updatePromptTemplateRequest($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePromptTemplate'
     *
     * @param  string $id The prompt&#39;s id (required)
     * @param  string $alternateContentId The alternate content id (required)
     * @param  string $newEmailId The prompt&#39;s new email id (required)
     * @param  string $ogEmailId The prompt&#39;s original email id (required)
     * @param  string $newExampleVideoId The prompt&#39;s new tutorial video id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePromptTemplateRequest($id, $alternateContentId, $newEmailId, $ogEmailId, $newExampleVideoId)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePromptTemplate'
            );
        }
        // verify the required parameter 'alternateContentId' is set
        if ($alternateContentId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alternateContentId when calling updatePromptTemplate'
            );
        }
        // verify the required parameter 'newEmailId' is set
        if ($newEmailId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newEmailId when calling updatePromptTemplate'
            );
        }
        // verify the required parameter 'ogEmailId' is set
        if ($ogEmailId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ogEmailId when calling updatePromptTemplate'
            );
        }
        // verify the required parameter 'newExampleVideoId' is set
        if ($newExampleVideoId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newExampleVideoId when calling updatePromptTemplate'
            );
        }

        $resourcePath = '/prompts/{id}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($alternateContentId !== null) {
            $formParams['alternateContentId'] = ObjectSerializer::toFormValue($alternateContentId);
        }
        // form params
        if ($newEmailId !== null) {
            $formParams['newEmailId'] = ObjectSerializer::toFormValue($newEmailId);
        }
        // form params
        if ($ogEmailId !== null) {
            $formParams['ogEmailId'] = ObjectSerializer::toFormValue($ogEmailId);
        }
        // form params
        if ($newExampleVideoId !== null) {
            $formParams['newExampleVideoId'] = ObjectSerializer::toFormValue($newExampleVideoId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
