<?php
/**
 * JerichoConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to use simple video to build relationships
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * JerichoConfiguration Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JerichoConfiguration implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JerichoConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'string',
        'client_group_id' => 'string',
        'send_date' => '\DateTime',
        'is_prompt' => 'bool',
        'email_id' => 'string',
        'prompt_subject' => 'string',
        'prompt_body' => 'string',
        'email_subject' => 'string',
        'email_body' => 'string',
        'send_without_video' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'client_group_id' => 'clientGroupId',
        'send_date' => 'sendDate',
        'is_prompt' => 'isPrompt',
        'email_id' => 'emailId',
        'prompt_subject' => 'promptSubject',
        'prompt_body' => 'promptBody',
        'email_subject' => 'emailSubject',
        'email_body' => 'emailBody',
        'send_without_video' => 'sendWithoutVideo'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'client_group_id' => 'setClientGroupId',
        'send_date' => 'setSendDate',
        'is_prompt' => 'setIsPrompt',
        'email_id' => 'setEmailId',
        'prompt_subject' => 'setPromptSubject',
        'prompt_body' => 'setPromptBody',
        'email_subject' => 'setEmailSubject',
        'email_body' => 'setEmailBody',
        'send_without_video' => 'setSendWithoutVideo'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'client_group_id' => 'getClientGroupId',
        'send_date' => 'getSendDate',
        'is_prompt' => 'getIsPrompt',
        'email_id' => 'getEmailId',
        'prompt_subject' => 'getPromptSubject',
        'prompt_body' => 'getPromptBody',
        'email_subject' => 'getEmailSubject',
        'email_body' => 'getEmailBody',
        'send_without_video' => 'getSendWithoutVideo'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['client_group_id'] = isset($data['client_group_id']) ? $data['client_group_id'] : null;
        $this->container['send_date'] = isset($data['send_date']) ? $data['send_date'] : null;
        $this->container['is_prompt'] = isset($data['is_prompt']) ? $data['is_prompt'] : null;
        $this->container['email_id'] = isset($data['email_id']) ? $data['email_id'] : null;
        $this->container['prompt_subject'] = isset($data['prompt_subject']) ? $data['prompt_subject'] : null;
        $this->container['prompt_body'] = isset($data['prompt_body']) ? $data['prompt_body'] : null;
        $this->container['email_subject'] = isset($data['email_subject']) ? $data['email_subject'] : null;
        $this->container['email_body'] = isset($data['email_body']) ? $data['email_body'] : null;
        $this->container['send_without_video'] = isset($data['send_without_video']) ? $data['send_without_video'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['is_prompt'] === null) {
            $invalid_properties[] = "'is_prompt' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['is_prompt'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets client_group_id
     * @return string
     */
    public function getClientGroupId()
    {
        return $this->container['client_group_id'];
    }

    /**
     * Sets client_group_id
     * @param string $client_group_id
     * @return $this
     */
    public function setClientGroupId($client_group_id)
    {
        $this->container['client_group_id'] = $client_group_id;

        return $this;
    }

    /**
     * Gets send_date
     * @return \DateTime
     */
    public function getSendDate()
    {
        return $this->container['send_date'];
    }

    /**
     * Sets send_date
     * @param \DateTime $send_date When the email should be sent.
     * @return $this
     */
    public function setSendDate($send_date)
    {
        $this->container['send_date'] = $send_date;

        return $this;
    }

    /**
     * Gets is_prompt
     * @return bool
     */
    public function getIsPrompt()
    {
        return $this->container['is_prompt'];
    }

    /**
     * Sets is_prompt
     * @param bool $is_prompt Determines whether this is a static or prompted send.
     * @return $this
     */
    public function setIsPrompt($is_prompt)
    {
        $this->container['is_prompt'] = $is_prompt;

        return $this;
    }

    /**
     * Gets email_id
     * @return string
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     * @param string $email_id Static send: The Email to send on behalf of the group members.
     * @return $this
     */
    public function setEmailId($email_id)
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets prompt_subject
     * @return string
     */
    public function getPromptSubject()
    {
        return $this->container['prompt_subject'];
    }

    /**
     * Sets prompt_subject
     * @param string $prompt_subject Video Prompt: The subject line prompting the user to record a video.
     * @return $this
     */
    public function setPromptSubject($prompt_subject)
    {
        $this->container['prompt_subject'] = $prompt_subject;

        return $this;
    }

    /**
     * Gets prompt_body
     * @return string
     */
    public function getPromptBody()
    {
        return $this->container['prompt_body'];
    }

    /**
     * Sets prompt_body
     * @param string $prompt_body Video Prompt: The HTML body of the email prompting the user to record a video.
     * @return $this
     */
    public function setPromptBody($prompt_body)
    {
        $this->container['prompt_body'] = $prompt_body;

        return $this;
    }

    /**
     * Gets email_subject
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->container['email_subject'];
    }

    /**
     * Sets email_subject
     * @param string $email_subject Video Prompt: The subject line of the final sent email
     * @return $this
     */
    public function setEmailSubject($email_subject)
    {
        $this->container['email_subject'] = $email_subject;

        return $this;
    }

    /**
     * Gets email_body
     * @return string
     */
    public function getEmailBody()
    {
        return $this->container['email_body'];
    }

    /**
     * Sets email_body
     * @param string $email_body Video Prompt: The HTML body of the final sent email.
     * @return $this
     */
    public function setEmailBody($email_body)
    {
        $this->container['email_body'] = $email_body;

        return $this;
    }

    /**
     * Gets send_without_video
     * @return bool
     */
    public function getSendWithoutVideo()
    {
        return $this->container['send_without_video'];
    }

    /**
     * Sets send_without_video
     * @param bool $send_without_video Video Prompt: Whether to send the final email if no video was recorded.
     * @return $this
     */
    public function setSendWithoutVideo($send_without_video)
    {
        $this->container['send_without_video'] = $send_without_video;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


