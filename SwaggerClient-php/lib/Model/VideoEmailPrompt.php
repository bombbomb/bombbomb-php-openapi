<?php
/**
 * VideoEmailPrompt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * VideoEmailPrompt Class Doc Comment
 *
 * @category    Class */
 // @description Configures a single prompt which asks a user to record a video into an outgoing email.
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VideoEmailPrompt implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VideoEmailPrompt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'string',
        'user_id' => 'string',
        'template_id' => 'string',
        'email_subject_line' => 'string',
        'email_content' => 'string',
        'to_email_addresses' => 'string[]',
        'to_lists' => 'string[]',
        'jericho_id' => 'string',
        'prompt_subject' => 'string',
        'prompt_html' => 'string',
        'send_without_video' => 'bool',
        'video_due_date' => '\DateTime',
        'scheduled_send_date' => '\DateTime',
        'video_id' => 'string',
        'email_id' => 'string',
        'job_id' => 'string',
        'status' => 'int',
        'do_not_apply_template' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'user_id' => 'userId',
        'template_id' => 'templateId',
        'email_subject_line' => 'emailSubjectLine',
        'email_content' => 'emailContent',
        'to_email_addresses' => 'toEmailAddresses',
        'to_lists' => 'toLists',
        'jericho_id' => 'jerichoId',
        'prompt_subject' => 'promptSubject',
        'prompt_html' => 'promptHtml',
        'send_without_video' => 'sendWithoutVideo',
        'video_due_date' => 'videoDueDate',
        'scheduled_send_date' => 'scheduledSendDate',
        'video_id' => 'videoId',
        'email_id' => 'emailId',
        'job_id' => 'jobId',
        'status' => 'status',
        'do_not_apply_template' => 'doNotApplyTemplate'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'user_id' => 'setUserId',
        'template_id' => 'setTemplateId',
        'email_subject_line' => 'setEmailSubjectLine',
        'email_content' => 'setEmailContent',
        'to_email_addresses' => 'setToEmailAddresses',
        'to_lists' => 'setToLists',
        'jericho_id' => 'setJerichoId',
        'prompt_subject' => 'setPromptSubject',
        'prompt_html' => 'setPromptHtml',
        'send_without_video' => 'setSendWithoutVideo',
        'video_due_date' => 'setVideoDueDate',
        'scheduled_send_date' => 'setScheduledSendDate',
        'video_id' => 'setVideoId',
        'email_id' => 'setEmailId',
        'job_id' => 'setJobId',
        'status' => 'setStatus',
        'do_not_apply_template' => 'setDoNotApplyTemplate'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'user_id' => 'getUserId',
        'template_id' => 'getTemplateId',
        'email_subject_line' => 'getEmailSubjectLine',
        'email_content' => 'getEmailContent',
        'to_email_addresses' => 'getToEmailAddresses',
        'to_lists' => 'getToLists',
        'jericho_id' => 'getJerichoId',
        'prompt_subject' => 'getPromptSubject',
        'prompt_html' => 'getPromptHtml',
        'send_without_video' => 'getSendWithoutVideo',
        'video_due_date' => 'getVideoDueDate',
        'scheduled_send_date' => 'getScheduledSendDate',
        'video_id' => 'getVideoId',
        'email_id' => 'getEmailId',
        'job_id' => 'getJobId',
        'status' => 'getStatus',
        'do_not_apply_template' => 'getDoNotApplyTemplate'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['email_subject_line'] = isset($data['email_subject_line']) ? $data['email_subject_line'] : null;
        $this->container['email_content'] = isset($data['email_content']) ? $data['email_content'] : null;
        $this->container['to_email_addresses'] = isset($data['to_email_addresses']) ? $data['to_email_addresses'] : null;
        $this->container['to_lists'] = isset($data['to_lists']) ? $data['to_lists'] : null;
        $this->container['jericho_id'] = isset($data['jericho_id']) ? $data['jericho_id'] : null;
        $this->container['prompt_subject'] = isset($data['prompt_subject']) ? $data['prompt_subject'] : null;
        $this->container['prompt_html'] = isset($data['prompt_html']) ? $data['prompt_html'] : null;
        $this->container['send_without_video'] = isset($data['send_without_video']) ? $data['send_without_video'] : null;
        $this->container['video_due_date'] = isset($data['video_due_date']) ? $data['video_due_date'] : null;
        $this->container['scheduled_send_date'] = isset($data['scheduled_send_date']) ? $data['scheduled_send_date'] : null;
        $this->container['video_id'] = isset($data['video_id']) ? $data['video_id'] : null;
        $this->container['email_id'] = isset($data['email_id']) ? $data['email_id'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['do_not_apply_template'] = isset($data['do_not_apply_template']) ? $data['do_not_apply_template'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['email_subject_line'] === null) {
            $invalid_properties[] = "'email_subject_line' can't be null";
        }
        if ($this->container['email_content'] === null) {
            $invalid_properties[] = "'email_content' can't be null";
        }
        if ($this->container['prompt_subject'] === null) {
            $invalid_properties[] = "'prompt_subject' can't be null";
        }
        if ($this->container['prompt_html'] === null) {
            $invalid_properties[] = "'prompt_html' can't be null";
        }
        if ($this->container['scheduled_send_date'] === null) {
            $invalid_properties[] = "'scheduled_send_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['email_subject_line'] === null) {
            return false;
        }
        if ($this->container['email_content'] === null) {
            return false;
        }
        if ($this->container['prompt_subject'] === null) {
            return false;
        }
        if ($this->container['prompt_html'] === null) {
            return false;
        }
        if ($this->container['scheduled_send_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The identifier of the prompt. Read Only.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id The prompt's owner. Read Only.
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets template_id
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     * @param string $template_id Optional. The email template to be used in the sent email, if none supplied, the users' default will be applied.
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets email_subject_line
     * @return string
     */
    public function getEmailSubjectLine()
    {
        return $this->container['email_subject_line'];
    }

    /**
     * Sets email_subject_line
     * @param string $email_subject_line The subject line of the final email
     * @return $this
     */
    public function setEmailSubjectLine($email_subject_line)
    {
        $this->container['email_subject_line'] = $email_subject_line;

        return $this;
    }

    /**
     * Gets email_content
     * @return string
     */
    public function getEmailContent()
    {
        return $this->container['email_content'];
    }

    /**
     * Sets email_content
     * @param string $email_content The HTML content of the final email
     * @return $this
     */
    public function setEmailContent($email_content)
    {
        $this->container['email_content'] = $email_content;

        return $this;
    }

    /**
     * Gets to_email_addresses
     * @return string[]
     */
    public function getToEmailAddresses()
    {
        return $this->container['to_email_addresses'];
    }

    /**
     * Sets to_email_addresses
     * @param string[] $to_email_addresses Email addresses to send the final email to, can be mixed with listIds.
     * @return $this
     */
    public function setToEmailAddresses($to_email_addresses)
    {
        $this->container['to_email_addresses'] = $to_email_addresses;

        return $this;
    }

    /**
     * Gets to_lists
     * @return string[]
     */
    public function getToLists()
    {
        return $this->container['to_lists'];
    }

    /**
     * Sets to_lists
     * @param string[] $to_lists List Ids to send the final email to
     * @return $this
     */
    public function setToLists($to_lists)
    {
        $this->container['to_lists'] = $to_lists;

        return $this;
    }

    /**
     * Gets jericho_id
     * @return string
     */
    public function getJerichoId()
    {
        return $this->container['jericho_id'];
    }

    /**
     * Sets jericho_id
     * @param string $jericho_id If sent in a jericho context, this will have the jericho id
     * @return $this
     */
    public function setJerichoId($jericho_id)
    {
        $this->container['jericho_id'] = $jericho_id;

        return $this;
    }

    /**
     * Gets prompt_subject
     * @return string
     */
    public function getPromptSubject()
    {
        return $this->container['prompt_subject'];
    }

    /**
     * Sets prompt_subject
     * @param string $prompt_subject The prompt's subject line
     * @return $this
     */
    public function setPromptSubject($prompt_subject)
    {
        $this->container['prompt_subject'] = $prompt_subject;

        return $this;
    }

    /**
     * Gets prompt_html
     * @return string
     */
    public function getPromptHtml()
    {
        return $this->container['prompt_html'];
    }

    /**
     * Sets prompt_html
     * @param string $prompt_html The HTML body of the prompt
     * @return $this
     */
    public function setPromptHtml($prompt_html)
    {
        $this->container['prompt_html'] = $prompt_html;

        return $this;
    }

    /**
     * Gets send_without_video
     * @return bool
     */
    public function getSendWithoutVideo()
    {
        return $this->container['send_without_video'];
    }

    /**
     * Sets send_without_video
     * @param bool $send_without_video Whether to send the email if no video is recorded. If set to require a video, and none is added before the videoDueDate, the prompt is cancelled.
     * @return $this
     */
    public function setSendWithoutVideo($send_without_video)
    {
        $this->container['send_without_video'] = $send_without_video;

        return $this;
    }

    /**
     * Gets video_due_date
     * @return \DateTime
     */
    public function getVideoDueDate()
    {
        return $this->container['video_due_date'];
    }

    /**
     * Sets video_due_date
     * @param \DateTime $video_due_date When the video must be recorded by
     * @return $this
     */
    public function setVideoDueDate($video_due_date)
    {
        $this->container['video_due_date'] = $video_due_date;

        return $this;
    }

    /**
     * Gets scheduled_send_date
     * @return \DateTime
     */
    public function getScheduledSendDate()
    {
        return $this->container['scheduled_send_date'];
    }

    /**
     * Sets scheduled_send_date
     * @param \DateTime $scheduled_send_date When the final email is scheduled to be sent
     * @return $this
     */
    public function setScheduledSendDate($scheduled_send_date)
    {
        $this->container['scheduled_send_date'] = $scheduled_send_date;

        return $this;
    }

    /**
     * Gets video_id
     * @return string
     */
    public function getVideoId()
    {
        return $this->container['video_id'];
    }

    /**
     * Sets video_id
     * @param string $video_id The video that was added to the prompt. Read Only.
     * @return $this
     */
    public function setVideoId($video_id)
    {
        $this->container['video_id'] = $video_id;

        return $this;
    }

    /**
     * Gets email_id
     * @return string
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     * @param string $email_id The email that was created by the prompt Read Only.
     * @return $this
     */
    public function setEmailId($email_id)
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     * @param string $job_id The job sent by the prompt Read Only.
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status The status of the prompt: created = 0, sent = 10, recorded = 20, job_created = 30, timed_out = 40, declined = 50 Read Only
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets do_not_apply_template
     * @return bool
     */
    public function getDoNotApplyTemplate()
    {
        return $this->container['do_not_apply_template'];
    }

    /**
     * Sets do_not_apply_template
     * @param bool $do_not_apply_template Controls whether a user template is applied to the message as it is sent
     * @return $this
     */
    public function setDoNotApplyTemplate($do_not_apply_template)
    {
        $this->container['do_not_apply_template'] = $do_not_apply_template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


